#!/bin/sh
#Version 210813.1

echo "[rcS] Start"
echo "Spark 7162 Enigma2"

MODDIR=/lib/modules

insmod $MODDIR/e2_proc.ko

echo "Init frontpanel"
insmod $MODDIR/aotom.ko #paramDebug=0
insmod $MODDIR/simu_button.ko

if [ -e $MODDIR/encrypt.ko ]; then
   insmod $MODDIR/encrypt.ko
fi

if [ -e /var/etc/.firstboot ]; then
   echo "config.plugins.remotecontroltype.rctype=10" >> /etc/enigma2/settings
   echo "Wait 1 min." > /dev/vfd
   echo "[rcS] WAIT 1 minute"
   rm /var/etc/.firstboot
   sleep 1
   touch /dev/.devfsd
else
   echo "Load 10" > /dev/vfd
   echo "[rcS] LOAD 10"
fi

/etc/init.d/mountvirtfs start
/etc/init.d/portmap start
/etc/init.d/autofs start

if [ -e "$MODDIR/cpu_frequ.ko" ]; then
   insmod $MODDIR/cpu_frequ.ko
   cpufreq=`cat /etc/enigma2/settings | grep systemoptions.freq | cut -d "=" -f2`
   case $cpufreq in
      200) overclk=5123;;
      300) overclk=2561;;
      450) overclk=3841;;
      500) overclk=12803;;
      540) overclk=4609;;
      600) overclk=5121;;
      630) overclk=5377;;
      650) overclk=16643;;
      700) overclk=17923;;
      710) overclk=18179;;
      750) overclk=19203;;
      775) overclk=39686;;
      800) overclk=20483;;
      *)   cpufreq=540
           overclk=4609;;
   esac
   echo $overclk > /proc/cpu_frequ/pll0_ndiv_mdiv
   echo "[rcS] Setting CPU clock speed to $cpufreq MHz (overclk=$overclk)"
fi

echo "[rcS] Starting DEBUG Interface"
/etc/init.d/mountall start
/etc/init.d/hostname start

echo -n "[rcS] Starting telnetd "
autologin=`cat /etc/enigma2/settings | grep systemoptions.autologin | cut -d "=" -f2`
if [ ! $autologin ]; then
   /usr/sbin/telnetd -l /bin/autologin
   echo "with autologin"
else
   /usr/sbin/telnetd -l /bin/login
   echo "with normal login"
fi

echo "[rcS] Init stmfb (LOAD 9)"
echo "Load 9" > /dev/vfd
insmod $MODDIR/stmcore-display-sti7105.ko
if grep -q "config.av.videoport=Scart" /etc/enigma2/settings; then
  insmod $MODDIR/stmfb.ko display0=720x576i-32@50:15m::pal:cvbs:rgb; #SCART
else
  insmod $MODDIR/stmfb.ko display0=1280x720-32@50:16m::pal:cvbs:rgb; #HDMI
fi

echo "[rcS] Loading modules"

if [ ! -e /boot/audio.elf ] || [ ! -e /boot/video.elf ]; then
   echo "[rcS] FIRMWARE MISSING!"
   echo "FW MISSING!" > /dev/vfd
fi

echo "[rcS] Load video firmware (LOAD 8)"
echo "Load 8" > /dev/vfd
/bin/ustslave /dev/st231-0 /boot/video.elf > /dev/null

echo "[rcS] Load audio firmware (LOAD 7)"
echo "Load 7" > /dev/vfd
dtsdown=`cat /etc/enigma2/settings | grep systemoptions.dtsdownmix | cut -d "=" -f2`
if [ ! $dtsdown ] && [ -e /boot/audio_dts.elf ]; then
   /bin/ustslave /dev/st231-1 /boot/audio_dts.elf > /dev/null
else
   /bin/ustslave /dev/st231-1 /boot/audio.elf > /dev/null
fi

echo "[rcS] Init embx (LOAD 6)"
echo "Load 6" > /dev/vfd
insmod $MODDIR/embxshell.ko
insmod $MODDIR/embxmailbox.ko mailbox0=0xfe211000:136:set2 mailbox1=0xfe212000:0
insmod $MODDIR/embxshm.ko mailbox0=shm:0:7:0x60000000:0:256:256:0:512:0x40000000:0x10000000
insmod $MODDIR/mme_host.ko transport0=shm

echo "[rcS] Init AVS (LOAD 5)"
echo "Load 5" > /dev/vfd
insmod $MODDIR/avs.ko type=avs_pio

player=`cat /proc/stb/player/version | awk '{ print substr( $0, length($0) - 2, length($0) ) }'`
echo "[rcS] Init player $player (LOAD 4)"
echo "Load 4" > /dev/vfd

insmod $MODDIR/mmelog.ko
insmod $MODDIR/ksound.ko
insmod $MODDIR/p2div64.ko
insmod $MODDIR/stm_v4l2.ko
insmod $MODDIR/stmvout.ko
insmod $MODDIR/stmvbi.ko
insmod $MODDIR/pseudocard.ko

tunertype=`cat /etc/enigma2/settings | grep systemoptions.tunertype | cut -d "=" -f2`
if [ ! $tunertype ]; then
   tunertype='t'
fi
insmod $MODDIR/spark7162-fe.ko UnionTunerType=$tunertype # paramDebug=0

insmod $MODDIR/pti.ko waitMS=20 videoMem=4096
if [ $? -ne 0 ]; then
   insmod $MODDIR/pti.ko
   echo "[rcS] Simple pti"
else
   echo "[rcS] Full feature pti"
fi
insmod $MODDIR/stm_monitor.ko
insmod $MODDIR/stmsysfs.ko
insmod $MODDIR/stmdvb.ko

echo "[rcS] LOAD 3"
echo "Load 3" > /dev/vfd
#insmod $MODDIR/player2.ko discardlateframe=0
insmod $MODDIR/player2.ko
insmod $MODDIR/sth264pp.ko
insmod $MODDIR/stmalloc.ko
insmod $MODDIR/platform.ko
insmod $MODDIR/silencegen.ko

insmod $MODDIR/smartcard.ko

if [ -e $MODDIR/dvb-it913x.ko ]; then
   echo
   echo "[rcS] IT913X driver loading"
   echo "[rcS] ---------------------"
   insmod $MODDIR/dvb-pll.ko
   insmod $MODDIR/dvb-it913x.ko
   echo
   echo "[rcS] End of IT913X driver loading"
   echo "[rcS] ----------------------------"
fi

if [ -e $MODDIR/dvb-usb-rtl2832u.ko ]; then
   echo
   echo "[rcS] RTL2832U driver loading"
   echo "[rcS] -----------------------"
   insmod $MODDIR/dvb-usb-rtl2832u.ko
   echo
   echo "[rcS] End of RTL2832U driver loading"
   echo "[rcS] ------------------------------"
fi

if [ -e $MODDIR/rfmod.ko ]; then
   insmod $MODDIR/rfmod.ko type=74t1 # paramDebug=0
fi

if [ -e $MODDIR/usbserial.ko ]; then
   insmod $MODDIR/usbserial.ko
   if [ -e $MODDIR/ch341.ko ]; then
      echo "[rcS] Init CH341 USB serial support"
      insmod $MODDIR/ch341.ko
   fi
   if [ -e $MODDIR/ftdi.ko ]; then
      echo "[rcS] Init FTDI USB serial support"
      insmod $MODDIR/ftdi.ko
   fi
   if [ -e $MODDIR/pl2303.ko ]; then
   echo "[rcS] Init PL2303 USB serial support"
      insmod $MODDIR/pl2303.ko
   fi
   if [ -e $MODDIR/ch341.ko ]; then
   echo "[rcS] Init CH341 USB serial support"
      insmod $MODDIR/ch341.ko
   fi
  if [ -e $MODDIR/option.ko ]; then
    insmod $MODDIR/option.ko
  fi
  if [ -e $MODDIR/usb_wwan.ko ]; then # 3G modem
    insmod $MODDIR/usb_wwan.ko
  fi
  insmod $MODDIR/option.ko
fi

echo "[rcS] Init HDMI-CEC"
insmod $MODDIR/cec.ko activemode=1

insmod $MODDIR/bpamem.ko
mknod /dev/bpamem c 153 0

if [ -e /boot/bootlogo.mvi ]; then
   showiframe -p /boot/bootlogo.mvi &
fi
stfbcontrol a 0

echo "[rcS] Init lircd (LOAD 2)"
echo "Load 2" > /dev/vfd
/usr/bin/lircd
rm -rf /dev/rc
mknod /dev/rc c 147 1 #VFD
/bin/evremote2 10 120 &

echo "[rcS] Init smartcard cardreader"
#mknod /dev/sci0 c 169 0
#mknod /dev/sci1 c 169 1

stfbcontrol a 255

#wlan=`cat /etc/enigma2/settings | grep systemoptions.wlan | cut -d "=" -f2`
wlan=
if [ ! $wlan ] || [ ! -e $MODDIR/$wlan.ko ]; then
   echo "[rcS] No WLAN"
else
   insmod $MODDIR/$wlan.ko
   echo "[rcS] $wlan WLAN"
#   echo "$wlan WLAN" > /dev/vfd
#   sleep 3
fi

if [ -e $MODDIR/ntfs.ko ]; then
   insmod $MODDIR/ntfs.ko
fi

if [ -e $MODDIR/cifs.ko ]; then
   insmod $MODDIR/cifs.ko
fi

echo "[rcS] Init FTP & network"
/etc/init.d/vsftpd start
/usr/sbin/inetd

NFS=`grep -c nfs /proc/cmdline`
if [ "$NFS" -eq "1" ]; then
   echo "Booting from NFS, do not set network"
else
   if [ -e /etc/network/interfaces ]; then
      ip addr flush eth0
      /etc/init.d/networking stop
      DHCP=`grep -c 'iface eth0 inet dhcp' /etc/network/interfaces`
      if [ "$DHCP" -eq "1" ]; then
         echo "[rcS] Starting DHCP on eth0"
         /etc/init.d/udhcpc start
      fi
      /etc/init.d/networking start &
   fi
fi
#Allow network to wake up and initialize
sleep 2
#Show IP address on frontpanel
#ip=`ifconfig eth0 | sed -n '/inet addr/s/.*addr.\([^ ]*\) .*/\1/p'`
#echo "IP $ip" > /dev/vfd
#sleep 3

echo "[rcS] Do extras (LOAD 1)"
echo "Load 1" > /dev/vfd
# Start automount
if [ -e /etc/init.d/automount ]; then
   python /etc/init.d/automount &
fi

# Do own extras
if [ -e /etc/ownscript.sh ]; then
   /etc/ownscript.sh &
fi

# Try and synchronise time
#inettime=`cat /etc/enigma2/settings | grep systemoptions.inettime | cut -d "=" -f2`
# if [ ! $inettime ] && [ -e /sbin/ntpd ]; then
if [ -h /usr/sbin/ntpd ]; then
   echo "[rcS] Set internet time"
   (ntpd -n -p 0.europe.pool.ntp.org -q; /bin/fp_control -sst)
#else
#   if [ -e /usr/sbin/time.sh ]; then
#      echo "[rcS] Use transponder time"
#      /usr/sbin/time.sh &
#   fi
fi

echo "[rcS] Start Enigma2"
echo "Start E2" > /dev/vfd

until false
do
   echo "[rcS] Entering E2 main loop"
   if [ -e /usr/local/share/enigma2/backdrop.mvi ]; then
      showiframe -p /usr/local/share/enigma2/backdrop.mvi
   fi
   /usr/local/bin/enigma2
   rtv=$?
   echo "[rcS] E2 ended <- RTV: " $rtv
   /bin/fp_control -i 46 0
   case "$rtv" in
      0)  echo "[rcS] E2 ERROR"
          echo "E2 Error" > /dev/vfd
          init 6;;
      1)  echo "[rcS] DEEP STANDBY"
          echo "Shutdown" > /dev/vfd
          if [ -e /usr/local/share/enigma2/shutdown.mvi ]; then
             showiframe -p /usr/local/share/enigma2/shutdown.mvi
          fi
          init 0;;
      2)  echo "[rcS] REBOOT"
          echo "Reboot" > /dev/vfd
          init 6;;
      3)  echo "[rcS] E2 RESTART"
          echo "Restart GUI" > /dev/vfd
          echo "0" > /proc/progress
          if [ -e /usr/local/share/enigma2/backdrop.mvi ]; then
             showiframe -p /usr/local/share/enigma2/backdrop.mvi
          else
             showiframe -p /boot/bootlogo.mvi &
          fi;;
      6)  echo "[rcS] E2 DEBUG"
          echo "Restart Dbg" > /dev/vfd
          echo "0" > /proc/progress
          if [ -e /usr/local/share/enigma2/backdrop.mvi ]; then
             showiframe -p /usr/local/share/enigma2/backdrop.mvi
          else
             showiframe -p /boot/bootlogo.mvi &
          fi;;
      10) echo "[rcS] SPARK RESTART"
          echo "SPARK Restart" > /dev/vfd
          insmod $MODDIR/i2s.ko
          if [ ! -f /etc/fw_env.config ]; then
             echo "fw_env.config not found - will create it"
             echo '/dev/mtd7 0x000A0000 0x00020000 0x20000' > /etc/fw_env.config
          fi
          var=`fw_printenv | grep 'bootargs_spark='`; fw_setenv bootargs ${var#*=}
          var=`fw_printenv | grep 'bootcmd_spark='`; fw_setenv bootcmd ${var#*=}
          var=`fw_printenv | grep 'boot_system_spark='`; fw_setenv boot_system ${var#*=}
          var=`fw_printenv | grep 'userfs_base_spark='`; fw_setenv userfs_base ${var#*=}
          var=`fw_printenv | grep 'userfs_len_spark='`; fw_setenv userfs_len ${var#*=}
          var=`fw_printenv | grep 'kernel_base_spark='`; fw_setenv kernel_base ${var#*=}
          var=`fw_printenv | grep 'kernel_name_spark='`; fw_setenv kernel_name ${var#*=}
          var=`fw_printenv | grep 'userfs_name_spark='`; fw_setenv userfs_name ${var#*=} 
          var=`fw_printenv | grep 'loadu_userfs_spark='`; fw_setenv loadu_userfs ${var#*=}
          var=`fw_printenv | grep 'loadu_kernel_spark='`; fw_setenv loadu_kernel ${var#*=}
          var=`fw_printenv | grep 'kernel_len_spark='`; fw_setenv kernel_len ${var#*=}
          sync
          init 6;;
      *)  echo "[rcS] ERROR"
          echo "Error" > /dev/vfd
          init 6;;
   esac
done

#never reached
echo "[rcS] REBOOT SPARK7162"
echo "Reboot SPARK7162" > /dev/vfd
reboot -f
