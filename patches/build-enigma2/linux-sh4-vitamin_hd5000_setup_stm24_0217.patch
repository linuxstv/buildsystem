--- a/arch/sh/kernel/setup.c.org
+++ b/arch/sh/kernel/setup.c
@@ -389,6 +389,44 @@
 #endif
 #endif
 
+	{
+		int command_line_len = strlen(command_line);
+		char flash_org_command_line[] = "console=ttyAS0,115200 panic=1 ubi.mtd=4 root=ubi0:rootfs";
+		char flash_new_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock4 ubi.mtd=4 root=ubi0:rootfs rootfstype=ubifs rw init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 panic=1 console_loglevel=7";
+//		char usb_org_command_line[] = "console=ttyAS0,115200 root=/dev/root";
+//		char usb_new_command_line[] = "console=ttyAS0,115200 root=/dev/root rw init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 nwhwconf=device:eth0,hwaddr:";
+//		char mac[] = "12:34:56:78:9A:BC";
+		int flash_org_command_line_len = strlen(flash_org_command_line);
+//		int usb_org_command_line_len = strlen(usb_org_command_line);
+		int i;
+
+//		for (i = 0; i < (command_line_len - 7); i++)
+//		{
+//			if (!strncmp(command_line + i, "ethaddr", 7))
+//			{
+//				strlcpy(mac, command_line + i + 8, sizeof(mac));
+//				break;
+//			}
+//			if (!strncmp(command_line + i, "hwaddr", 6))
+//			{
+//				strlcpy(mac, command_line + i + 7, sizeof(mac));
+//				break;
+//			}
+//		}
+		/* boot from flash */
+		if (command_line_len >= flash_org_command_line_len && !strncmp(command_line, flash_org_command_line, flash_org_command_line_len))
+		{
+			strlcpy(command_line, flash_new_command_line, sizeof(flash_new_command_line));
+//			strlcat(command_line, mac, sizeof(mac));
+		}
+//		/* boot from USB */
+//		if (command_line_len >= usb_org_command_line_len && !strncmp(command_line, usb_org_command_line, usb_org_command_line_len))
+//		{
+//			strlcpy(command_line, usb_new_command_line, sizeof(usb_new_command_line));
+//			strlcat(command_line, mac, sizeof(mac));
+//		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
@@ -555,6 +593,7 @@
 	seq_printf(m, "cpu family\t: %s\n", init_utsname()->machine);
 	seq_printf(m, "cpu variant\t: %s\n", get_cpu_variant(c));
 	seq_printf(m, "cpu type\t: %s\n", get_cpu_subtype(c));
+	seq_printf(m, "cpu MHz\t\t: 450\n");
 	if (c->cut_major == -1)
 		seq_printf(m, "cut\t\t: unknown\n");
 	else if (c->cut_minor == -1)
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;

--- a/arch/sh/boards/mach-mb618/setup.c.org
+++ b/arch/sh/boards/mach-mb618/setup.c
@@ -1,19 +1,23 @@
 /*
- * arch/sh/boards/st/mb618/setup.c
+ * arch/sh/boards/mach-mb618/setup.c
  *
  * Copyright (C) 2008 STMicroelectronics Limited
- * Author: Stuart Menefy (stuart.menefy@st.com)
+ * Authors: Stuart Menefy (stuart.menefy@st.com)
+ *          Audioniek
  *
  * May be copied or modified under the terms of the GNU General Public
  * License.  See linux/COPYING for more information.
  *
- * STMicroelectronics STx7111 Mboard support.
+ * Showbox Vitamin HD 5000 (256MB NAND) board support.
+ * (based on MB618 board).
  */
 
 #include <linux/init.h>
+#include <linux/i2c/at24.h>
+#include <linux/i2c.h>
 #include <linux/platform_device.h>
+#include <linux/delay.h>
 #include <linux/io.h>
-#include <linux/leds.h>
 #include <linux/phy.h>
 #include <linux/i2c.h>
 #include <linux/gpio.h>
@@ -23,351 +25,424 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7111.h>
 #include <linux/stm/emi.h>
-#include <linux/stm/pci-glue.h>
+#include <linux/stm/pio.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
+#include <linux/stm/nand.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
-#include <linux/spi/spi.h>
-#include <linux/spi/flash.h>
 #include <asm/irq-ilc.h>
 #include <asm/irl.h>
 #include <sound/stm.h>
-#include <mach/common.h>
 
+#define SZ_64K 0x00010000
-
-
-/* Whether the hardware supports NOR or NAND Flash depends on J34.
- * In position 1-2 CSA selects NAND, in position 2-3 is selects NOR.
- * Note that J30A must be in position 2-3 to select the on board Flash
- * (both NOR and NAND).
- */
-#define FLASH_NOR
-#define MB618_PIO_FLASH_VPP stm_gpio(3, 4)
-
-
-
-static void __init mb618_setup(char** cmdline_p)
-{
-	printk(KERN_INFO "STMicroelectronics STx7111 Mboard initialisation\n");
+//#include <mach/common.h>
+#include <linux/bpa2.h>
+
+static struct stpio_pin *pin_eth_reset;
+static struct stpio_pin *pin_flash_vpp;
+static struct stpio_pin *pin_nand_wp;
+
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buf", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+ 
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb)
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] =
+{
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    }, 
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 96 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    }, 
+};
+
+static void __init vitamin_hd5000_setup(char **cmdline_p)
+{
+	printk(KERN_INFO "Showbox Vitamin HD 5000 (256MB NAND) board initialisation\n");
 
+//	int l; for (l = 0; l < 300 * 1000; l++) { udelay(100); }
 	stx7111_early_device_init();
 
-	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
-			.is_console = 1, });
-	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
-			.is_console = 0, });
-}
-
-
-
-static struct platform_device mb618_leds = {
-	.name = "leds-gpio",
-	.id = -1,
-	.dev.platform_data = &(struct gpio_led_platform_data) {
-		.num_leds = 2,
-		.leds = (struct gpio_led[]) {
-			{
-				.name = "HB green",
-				.default_trigger = "heartbeat",
-				.gpio = stm_gpio(6, 0),
-			}, {
-				.name = "HB red",
-				.gpio = stm_gpio(6, 1),
-			},
-		},
-	},
-};
-
-
-
-static struct gpio_keys_button mb618_buttons[] = {
-	{
-		.code = BTN_0,
-		.gpio = stm_gpio(6, 2),
-		.desc = "SW2",
-	}, {
-		.code = BTN_1,
-		.gpio = stm_gpio(6, 3),
-		.desc = "SW3",
-	}, {
-		.code = BTN_2,
-		.gpio = stm_gpio(6, 4),
-		.desc = "SW4",
-	}, {
-		.code = BTN_3,
-		.gpio = stm_gpio(6, 5),
-		.desc = "SW5",
-	},
-};
-
-static struct platform_device mb618_button_device = {
-	.name = "gpio-keys",
-	.id = -1,
-	.num_resources = 0,
-	.dev.platform_data = &(struct gpio_keys_platform_data) {
-		.buttons = mb618_buttons,
-		.nbuttons = ARRAY_SIZE(mb618_buttons),
-	},
-};
-
-
-
-#ifdef FLASH_NOR
-/* J34 must be in the 1-2 position to enable NOR Flash */
-static void mb618_nor_set_vpp(struct map_info *info, int enable)
-{
-	gpio_set_value(MB618_PIO_FLASH_VPP, enable);
-}
-
-static struct platform_device mb618_nor_flash = {
-	.name		= "physmap-flash",
-	.id		= -1,
-	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
-	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.set_vpp	= mb618_nor_set_vpp,
-		.nr_parts	= 3,
-		.parts		=  (struct mtd_partition []) {
-			{
-				.name = "NOR Flash 1",
-				.size = 0x00080000,
-				.offset = 0x00000000,
-			}, {
-				.name = "NOR Flash 2",
-				.size = 0x00200000,
-				.offset = MTDPART_OFS_NXTBLK,
-			}, {
-				.name = "NOR Flash 3",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
-	},
-};
-#else
-struct stm_nand_bank_data mb618_nand_flash = {
-	.csn		= 0,
-	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
-	.nr_partitions	= 2,
-	.partitions	= (struct mtd_partition []) {
-		{
-			.name	= "NAND Flash 1",
-			.offset	= 0,
-			.size 	= 0x00800000
-		}, {
-			.name	= "NAND Flash 2",
-			.offset = MTDPART_OFS_NXTBLK,
-			.size	= MTDPART_SIZ_FULL
-		},
-	},
-	.timing_data	= &(struct stm_nand_timing_data) {
-		.sig_setup	= 50,		/* times in ns */
-		.sig_hold	= 50,
-		.CE_deassert	= 0,
-		.WE_to_RBn	= 100,
-		.wr_on		= 20,
-		.wr_off		= 50,
-		.rd_on		= 20,
-		.rd_off		= 50,
-		.chip_delay	= 50,		/* in us */
-	},
-};
-#endif
-
-/* Serial Flash (Board Rev D and later) */
-static struct spi_board_info mb618_serial_flash = {
-	.modalias       = "m25p80",
-	.bus_num        = 0,
-	.chip_select    = stm_gpio(6, 7),
-	.max_speed_hz   = 7000000,
-	.mode           = SPI_MODE_3,
-	.platform_data  = &(struct flash_platform_data) {
-		.name = "m25p80",
-		.type = "m25p80",
-		.nr_parts	= 2,
-		.parts = (struct mtd_partition []) {
-			{
-				.name = "Serial Flash 1",
-				.size = 0x00080000,
-				.offset = 0,
-			}, {
-				.name = "Serial Flash 2",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
-	},
-};
-
-static int mb618_phy_reset(void *bus)
-{
-	epld_write(1, 0);	/* bank = Ctrl */
-
-	/* Bring the PHY out of reset in MII mode */
-	epld_write(0x4 | 0, 4);
-	epld_write(0x4 | 1, 4);
+	stx7111_configure_asc(1, &(struct stx7111_asc_config)
+	{
+			.hw_flow_control = 0,
+			.is_console = 1,
+	});
+
+//	stx7111_configure_asc(2, &(struct stx7111_asc_config)
+//	{
+//			.hw_flow_control = 0,
+//			.is_console = 0,
+//	});
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+// NOR Flash Configuration
+static void vitamin_hd5000_nor_set_vpp(struct map_info *info, int enable)
+{
+	stpio_set_pin(pin_flash_vpp, (enable > 0) ? 1 : 0);
+}
+
+static struct mtd_partition nor_partitions[] =
+{
+	{
+		.name   = "nor.uboot",      // mtd0, u-boot
+		.offset = 0x00000000,
+		.size   = 0x00080000        // 512 kB, bootargs at offset 0x00040000
+	},
+	{
+		.name   = "nor.appl",       // mtd1; 
+		.offset = MTDPART_OFS_APPEND,
+		.size   = MTDPART_SIZ_FULL  // 8MB - 512 kB = 7.5 MB
+	}
+};
+
+static struct platform_device vitamin_hd5000_nor_device =
+{
+	.name               = "physmap-flash",
+	.id                 = -1,
+	.num_resources      = 1,
+	.resource           = (struct resource[])
+	{
+		STM_PLAT_RESOURCE_MEM(0, 8 * 1024 * 1024)  // 8 MB
+	},
+	.dev.platform_data  = &(struct physmap_flash_data)
+	{
+		.width          = 2,
+		.set_vpp        = vitamin_hd5000_nor_set_vpp,
+		.nr_parts       = ARRAY_SIZE(nor_partitions),
+		.parts          = nor_partitions
+	}
+};
+
+// NAND Flash Configuration
+static struct mtd_partition nand_partitions[] =
+{
+	{
+		.name	= "nand.uboot",            // mtd2, u-boot
+		.offset	= 0x00000000,
+		.size	= 0x00080000               // 512 kB, uses bootargs of nor.uboot
+	},
+	{
+		.name	= "nand.kernel",           // mtd3, kernel
+    	.offset = MTDPART_OFS_NXTBLK,      // 512 kb
+    	.size	= 0x00300000               // 3 MB
+	},
+	{
+		.name	= "nand.rootfs",           // mtd4
+		.offset	= MTDPART_OFS_NXTBLK,      // 3.5 MB
+		.size	= MTDPART_SIZ_FULL         // 256 MB - 3.5 MB = 252.5 MB (will expand to the end of the flash)
+	}
+};
+
+static struct stm_nand_bank_data vitamin_hd5000_nand_bank_data =
+{
+	.csn             = 1,
+	.options         = NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
+	.nr_partitions   = ARRAY_SIZE(nand_partitions),
+	.partitions      = nand_partitions,
+	.timing_data     = &(struct stm_nand_timing_data)
+	{
+		.sig_setup   = 50,  /* times in ns */
+		.sig_hold    = 50,
+		.CE_deassert = 0,
+		.WE_to_RBn   = 100,
+		.wr_on       = 20,
+		.wr_off      = 50,
+		.rd_on       = 20,
+		.rd_off      = 50,
+		.chip_delay  = 50,  /* in us */
+	},
+	.emi_withinbankoffset = 0
+};
+
+static struct platform_device vitamin_hd5000_nand_device =
+{
+	.name		= "stm-nand-emi",
+	.dev.platform_data = &(struct stm_plat_nand_emi_data)
+	{
+		.nr_banks	= 1,
+		.banks		= &vitamin_hd5000_nand_bank_data,
+		.emi_rbn_gpio	= -1,
+	},
+};
+
+static int vitamin_hd5000_phy_reset(void *bus)
+{
+	stpio_set_pin(pin_eth_reset, 0);
+	udelay(2);
+	stpio_set_pin(pin_eth_reset, 1);
 
 	return 1;
 }
 
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
+static struct stmmac_mdio_bus_data stmmac_mdio_bus =
+{
 	.bus_id = 0,
-	.phy_reset = mb618_phy_reset,
+	.phy_reset = vitamin_hd5000_phy_reset,
 	.phy_mask = 0,
 };
 
-static struct platform_device epld_device = {
-	.name		= "epld",
-	.id		= -1,
-	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		{
-			.start	= 0x06000000,
-			/* Minimum size to ensure mapped by PMB */
-			.end	= 0x06000000+(8*1024*1024)-1,
-			.flags	= IORESOURCE_MEM,
-		}
-	},
-	.dev.platform_data = &(struct plat_epld_data) {
-		 .opsize = 8,
-	},
-};
-
-
-
-static struct stm_plat_pci_config mb618_pci_config = {
-	/* We don't bother with INT[BCD] as they are shared with the ssc
-	 * J20-A must be removed, J20-B must be 5-6 */
-	.pci_irq = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
-	},
-	.serr_irq = PCI_PIN_DEFAULT, /* J32-F fitted */
-	.idsel_lo = 30,
-	.idsel_hi = 30,
-	.req_gnt = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
-	},
-	.pci_clk = 33333333,
-	.pci_reset_gpio = -EINVAL,	/* Reset done by EPLD on power on */
-};
-
-int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
-{
-       /* We can use the standard function on this board */
-       return stx7111_pcibios_map_platform_irq(&mb618_pci_config, pin);
-}
-
-static struct platform_device *mb618_devices[] __initdata = {
-	&mb618_leds,
-	&epld_device,
-#ifdef FLASH_NOR
-	&mb618_nor_flash,
-#endif
-	&mb618_button_device,
-};
-
-/* SCART switch simple control */
-
-/* Enable CVBS output to both (TV & VCR) SCART outputs */
-static int mb618_scart_audio_init(struct i2c_client *client, void *priv)
-{
-	const char cmd[] = { 0x2, 0x11 };
-	int cmd_len = sizeof(cmd);
-
-	return i2c_master_send(client, cmd, cmd_len) != cmd_len;
-}
-
-/* Audio on SCART outputs control */
-static struct i2c_board_info mb618_scart_audio __initdata = {
-	I2C_BOARD_INFO("snd_conv_i2c", 0x4b),
-	.type = "STV6417",
-	.platform_data = &(struct snd_stm_conv_i2c_info) {
-		.group = "Analog Output",
-		.source_bus_id = "snd_pcm_player.1",
-		.channel_from = 0,
-		.channel_to = 1,
-		.format = SND_STM_FORMAT__I2S |
-				SND_STM_FORMAT__SUBFRAME_32_BITS,
-		.oversampling = 256,
-		.init = mb618_scart_audio_init,
-		.enable_supported = 1,
-		.enable_cmd = (char []){ 0x01, 0x09 },
-		.enable_cmd_len = 2,
-		.disable_cmd = (char []){ 0x01, 0x00 },
-		.disable_cmd_len = 2,
-	},
-};
-
-static int __init mb618_devices_init(void)
-{
-	int peripherals_i2c_bus;
-
-	stx7111_configure_pci(&mb618_pci_config);
-
-	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
-			.out0_enabled = 1,
-			.out1_enabled = 0, });
-
-	stx7111_configure_ssc_spi(0, NULL);
-	stx7111_configure_ssc_i2c(1, NULL); /* J12=1-2, J16=1-2 */
-	peripherals_i2c_bus = stx7111_configure_ssc_i2c(2, NULL);
-	stx7111_configure_ssc_i2c(3, NULL);
+/*
+ * I2C eeprom
+ */
+static struct at24_platform_data at24c64 =
+{
+	.byte_len	= SZ_64K / 8,
+	.page_size	= 32,
+};
+
+static struct i2c_board_info vitamin_hd5000_i2c_device[] __initdata =
+{
+	{
+		I2C_BOARD_INFO("24c64", 0x50),
+		.platform_data = &at24c64,
+	},
+};
+
+static struct platform_device *vitamin_hd5000_devices[] __initdata =
+{
+	&vitamin_hd5000_nor_device,
+//	&vitamin_hd5000_nand_device
+//	&vitamin_hd5000_i2c_device
+};
+
+typedef struct
+{
+	int port;
+	int pin;
+	int direction;
+	char name[16];
+} pio_list_t;
+
+static pio_list_t vitamin_hd5000_pio_list[] =
+{
+	{  1, 2, STPIO_IN,  "TSIN_CLK", 	},
+	{  2, 3, STPIO_IN,  "TSIN_VALID",	},
+	{  2, 4, STPIO_IN,  "TSIN_D0",		},
+	{  2, 5, STPIO_IN,  "TSIN_D1",		},
+	{  2, 6, STPIO_IN,  "TSIN_D2",		},
+	{  2, 7, STPIO_IN,  "TSIN_D3",		},
+	{  5, 0, STPIO_IN,  "TSIN_D4",		},
+	{  5, 1, STPIO_IN,  "TSIN_D5",		},
+	{  5, 2, STPIO_IN,  "TSIN_D6",		},
+	{  5, 3, STPIO_IN,  "TSIN_D7",		},
+	{  5, 5, STPIO_IN,  "TSIN_SYNC",	},
+	{ 10, 3, STPIO_OUT, "TSOUT_CLK",	},
+	{ 10, 4, STPIO_OUT, "TSOUT_VALID",	},
+	{ 10, 5, STPIO_OUT, "TSOUT_D0",		},
+	{ 10, 6, STPIO_OUT, "TSOUT_D1",		},
+	{ 10, 7, STPIO_OUT, "TSOUT_D2",		},
+	{ 11, 0, STPIO_OUT, "TSOUT_D3",		},
+	{ 11, 1, STPIO_OUT, "TSOUT_D4",		},
+	{ 11, 2, STPIO_OUT, "TSOUT_D5",		},
+	{ 11, 3, STPIO_OUT, "TSOUT_D6",		},
+	{ 11, 4, STPIO_OUT, "TSOUT_D7",		},
+	{ 11, 6, STPIO_OUT, "TSOUT_SYNC",	}	
+};	
+#define VITAMIN_HD5000_MAX_PIOS (sizeof(vitamin_hd5000_pio_list) / sizeof(pio_list_t))
+
+static int __init vitamin_hd5000_devices_init(void)
+{
+	int i;
+	struct sysconf_field *sc;
+//	unsigned long nand_bank_base = 0;
+//	unsigned long nand_bank_size = 0;
+
+//	nand_bank_base = emi_bank_base(1);  // get base of NAND kernel
+//	nand_bank_size = emi_bank_base(2) - nand_bank_base;
+
+	stx7111_configure_pwm(&(struct stx7111_pwm_config)
+	{
+		.out0_enabled = 0,
+		.out1_enabled = 0
+	});
+
+	stx7111_configure_ssc_i2c(0, NULL);  /* I2C xxxA - HDMI */
+	stx7111_configure_ssc_i2c(1, NULL);  /* I2C xxxB - EEPROM, ALPU, FRONTEND, AV SWITCH */
+	stx7111_configure_ssc_i2c(2, NULL);  /* I2C xxxC - CI */
+	stx7111_configure_ssc_i2c(3, NULL);  /* I2C xxxD - INTERNAL FE900 */
 
 	stx7111_configure_usb(&(struct stx7111_usb_config) {
 			.invert_ovrcur = 1, });
 
-	stx7111_configure_ethernet(&(struct stx7111_ethernet_config) {
-			.mode = stx7111_ethernet_mode_mii,
-			.ext_clk = 0,
-			.phy_bus = 0,
-			.phy_addr = -1,
-			.mdio_bus_data = &stmmac_mdio_bus,
-		});
-
-	stx7111_configure_lirc(&(struct stx7111_lirc_config) {
-#ifdef CONFIG_LIRC_STM_UHF
-			.rx_mode = stx7111_lirc_rx_mode_uhf,
-#else
-			.rx_mode = stx7111_lirc_rx_mode_ir,
-#endif
-			.tx_enabled = 1,
-			.tx_od_enabled = 0, });
-
-	gpio_request(MB618_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB618_PIO_FLASH_VPP, 0);
-
-	i2c_register_board_info(peripherals_i2c_bus, &mb618_scart_audio, 1);
-	spi_register_board_info(&mb618_serial_flash, 1);
-
-#ifndef FLASH_NOR
-	stx7111_configure_nand(&(struct stm_nand_config) {
-			.driver = stm_nand_flex,
-			.nr_banks = 1,
-			.banks = &mb618_nand_flash,
-			.rbn.flex_connected = 1,});
-
-	/* The MTD NAND code doesn't understand the concept of VPP,
-	 * (or hardware write protect) so permanently enable it. */
-	gpio_direction_output(MB618_PIO_FLASH_VPP, 1);
-#endif
-
-	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
-}
-arch_initcall(mb618_devices_init);
-
-static void __iomem *mb618_ioport_map(unsigned long port, unsigned int size)
+	stx7111_configure_ethernet(&(struct stx7111_ethernet_config)
+	{
+		.mode = stx7111_ethernet_mode_mii,
+		.ext_clk       = 0,
+		.phy_bus       = 0,
+		.phy_addr      = -1,
+		.mdio_bus_data = &stmmac_mdio_bus
+	});
+
+#if 0
+	for (i = 0; i < VITAMIN_HD5000_MAX_PIOS; i++)
+	{
+		gpio_request(stm_gpio(vitamin_hd5000_pio_list[i].port, vitamin_hd5000_pio_list[i].pin), 
+					 vitamin_hd5000_pio_list[i].name);
+		
+		if (vitamin_hd5000_pio_list[i].direction == STPIO_IN)
+		{
+			gpio_direction_input(stm_gpio(vitamin_hd5000_pio_list[i].port, vitamin_hd5000_pio_list[i].pin));
+		}
+		else if (vitamin_hd5000_pio_list[i].direction == STPIO_OUT)
+		{
+			gpio_direction_output(stm_gpio(vitamin_hd5000_pio_list[i].port, vitamin_hd5000_pio_list[i].pin), 0);
+		}
+	}
+#endif
+	/* set SYS_CFG0 = 0 --> FE standard mode */
+	sc = sysconf_claim(SYS_CFG, 0, 0, 31, "FE900");
+	sysconf_write(sc, 0);
+	sysconf_release(sc);
+
+	/* set SYS_CFG5[0] = 1 --> DVB_CI Mode 1 */
+	sc = sysconf_claim(SYS_CFG, 5, 0, 0, "DVB_CI_MODE");
+	sysconf_write(sc, 1);
+	sysconf_release(sc);
+
+	/* set SYS_CFG5[17] = 1 --> DVB_CI Mode 1 PIO pads */
+	sc = sysconf_claim(SYS_CFG, 5, 17, 17, "DVB_CI_PADS");
+	sysconf_write(sc, 1);
+	sysconf_release(sc);
+	
+	/* set SYS_CFG5[8] = 1 --> HDMI_CEC_RX on PIO 1.7 */
+	sc = sysconf_claim(SYS_CFG, 5, 8, 8, "HDMI_CEC_RX");
+	sysconf_write(sc, 1);
+	sysconf_release(sc);
+	
+	pin_eth_reset = stpio_request_pin(2, 2, "PHY_RESET", STPIO_OUT);
+	pin_flash_vpp = stpio_request_pin(6, 3, "FLASH_VPP", STPIO_OUT);
+#if 0
+//---------------------------------------------------------------------
+	{
+		struct pio_list
+		{
+			int port_no;
+			int pio_no;
+		} assigned_pio_list[] =
+		{
+//			{  0, 0 },  // asc0 TX
+//			{  0, 1 },  // asc0 RX
+//			{  0, 4 },  // asc0 CTS
+//			{  0, 5 },  // asc0 RTS
+			{  1, 0 },  // asc1 TX
+			{  1, 1 },  // asc1 RX
+//			{  1, 2 },  // TSIN_CLK
+			{  1, 4 },  // asc1 CTS
+			{  1, 5 },  // asc2 RTS
+			{  2, 0 },  // i2c0 SCL
+			{  2, 1 },  // i2c0 SDA
+			{  2, 2 },  // ETH_RESET
+//			{  2, 3 },  // TSIN_VALID
+//			{  2, 4 },  // TSIN_D0
+//			{  2, 5 },  // TSIN_D1
+//			{  2, 6 },  // TSIN_D2
+//			{  2, 7 },  // TSIN_D3
+			{  3, 0 },  // i2c1 SCL
+			{  3, 1 },  // i2c1 SDA
+			{  4, 0 },  // i2c2 SCL
+			{  4, 1 },  // i2c2 SDA
+			{  4, 2 },  // asc2 RX  // micom
+			{  4, 3 },  // asc2 TX  // micom
+			{  4, 4 },  // asc2 CTS
+			{  4, 5 },  // asc2 RTS
+//			{  5, 0 },  // TSIN_D4 (asc3 TX)
+//			{  5, 1 },  // TSIN_D5 (asc3 RX)
+//			{  5, 2 },  // TSIN_D6 (asc3 CTS)
+//			{  5, 3 },  // TSIN_D7 (asc3 RTS)
+//			{  5, 5 },  // TSIN_SYNC
+			{  6, 3 },  // FLASH_VPP
+//			{ 10, 3 },  // TSOUT_CLK
+//			{ 10, 4 },  // TSOUT_VALID
+//			{ 10, 5 },  // TSOUT_D0
+//			{ 10, 6 },  // TSOUT_D1
+//			{ 10, 7 },  // TSOUT_D2
+//			{ 11, 0 },  // TSOUT_D3
+//			{ 11, 1 },  // TSOUT_D4
+//			{ 11, 2	},  // TSOUT_D5
+//			{ 11, 3	},  // TSOUT_D6
+//			{ 11, 4	},  // TSOUT_D7
+//			{ 11, 6 },  // TSOUT_SYNC
+		};
+
+		int i, j, k, l, assigned = 0;
+		static struct stpio_pin *pin_test;
+#define DELAY 20
+
+		printk(KERN_INFO "PIO pin test starting...\n");
+		for (j = 0; j < 12; j++)
+		{
+			for (i = 0; i < 8; i++)
+			{
+//				for (k = 0; k < sizeof(assigned_pio_list); k++)
+				for (k = 0; k < 16; k++)
+				{
+//					printk(KERN_INFO "assigned_pio_list[%d].port_no = %d\n", k, assigned_pio_list[k].port_no);
+//					printk(KERN_INFO "assigned_pio_list[%d].pio_no  = %d\n", k, assigned_pio_list[k].pio_no);
+					if (assigned_pio_list[k].port_no == j && assigned_pio_list[k].pio_no == i)
+					{
+						assigned = 1;
+						printk(KERN_INFO "Port %d.%d is already assigned, skipping\n", j, i);
+						break;
+					}
+				}
+				if (assigned == 0)
+				{
+					printk(KERN_INFO "Port %d.%d", j, i);
+					pin_test = stpio_request_pin(j, i, "TEST", STPIO_OUT);
+					printk(KERN_INFO " set to 1;");
+					stpio_set_pin(pin_test, 1);
+					for (l = 0; l < DELAY * 1000; l++) { udelay(100); }
+					printk(KERN_INFO " set to 0\n");
+					stpio_set_pin(pin_test, 0);
+//					for (l = 0; l < DELAY * 1000; l++) { udelay(100); }
+				}
+				else
+				{
+					assigned = 0;
+				}
+			}
+			printk(KERN_INFO "\n");
+		}
+		printk(KERN_INFO "PIO pin test complete.\n");
+	}
+//---------------------------------------------------------------------
+#endif
+//	pin_nand_wp = stpio_request_pin(15, 15, "NAND_WP", STPIO_OUT);
+
+	stx7111_configure_nand(&(struct stm_nand_config)
+	{
+			.driver             = stm_nand_flex,
+			.nr_banks           = 1,
+			.banks              = &vitamin_hd5000_nand_bank_data,
+			.rbn.flex_connected = 1,
+	});
+//	stpio_set_pin(pin_nand_wp, 1);
+
+	i2c_register_board_info(1, vitamin_hd5000_i2c_device, ARRAY_SIZE(vitamin_hd5000_i2c_device));
+
+	return platform_add_devices(vitamin_hd5000_devices, ARRAY_SIZE(vitamin_hd5000_devices));
+}
+arch_initcall(vitamin_hd5000_devices_init);
+
+static void __iomem *vitamin_hd5000_ioport_map(unsigned long port, unsigned int size)
 {
 	/*
 	 * If we have PCI then this should never be called because we
@@ -379,69 +336,11 @@
 	return (void __iomem *)CCN_PVR;
 }
 
-/*
- * We now only support version 6 or later EPLDs:
- *
- * off        read       write         reset
- *  0         Ident      Bank          46 (Bank register defaults to 0)
- *  4 bank=0  Test       Test          55
- *  4 bank=1  Ctrl       Ctrl          0e
- *  4 bank=2  IntPri0    IntPri0  f9
- *  4 bank=3  IntPri1    IntPri1  f0
- *  8         IntStat    IntMaskSet    -
- *  c         IntMask    IntMaskClr    00
- *
- * Ctrl register bits:
- *  0 = Ethernet Phy notReset
- *  1 = RMIInotMIISelect
- *  2 = Mode Select_7111 (ModeSelect when D0 == 1)
- *  3 = Mode Select_8700 (ModeSelect when D0 == 0)
- */
-
-static void __init mb618_init_irq(void)
-{
-	unsigned char epld_reg;
-	const int test_offset = 4;
-	const int version_offset = 0;
-	int version;
-
-	epld_early_init(&epld_device);
-
-	epld_write(0, 0);	/* bank = Test */
-	epld_write(0x63, test_offset);
-	epld_reg = epld_read(test_offset);
-	if (epld_reg != (unsigned char)(~0x63)) {
-		printk(KERN_WARNING
-		       "Failed mb618 EPLD test (off %02x, res %02x)\n",
-		       test_offset, epld_reg);
-		return;
-	}
-
-	version = epld_read(version_offset) & 0x1f;
-	printk(KERN_INFO "mb618 EPLD version %02d\n", version);
-
-	/*
-	 * We have the nice new shiny interrupt system at last.
-	 * For the moment just replicate the functionality to
-	 * route the STEM interrupt through.
-	 */
-
-	/* Route STEM Int0 (EPLD int 4) to output 2 */
-	epld_write(3, 0);	/* bank = IntPri1 */
-	epld_reg = epld_read(4);
-	epld_reg &= 0xfc;
-	epld_reg |= 2;
-	epld_write(epld_reg, 4);
-
-	/* Enable it */
-	epld_write(1<<4, 8);
-}
-
-struct sh_machine_vector mv_mb618 __initmv = {
-	.mv_name		= "STx7111 Mboard",
-	.mv_setup		= mb618_setup,
-	.mv_nr_irqs		= NR_IRQS,
-	.mv_init_irq		= mb618_init_irq,
-	.mv_ioport_map		= mb618_ioport_map,
-	STM_PCI_IO_MACHINE_VEC
-};
+struct sh_machine_vector mv_vitamin_hd5000 __initmv =
+{
+	.mv_name       = "Showbox Vitamin HD 5000",
+	.mv_setup      = vitamin_hd5000_setup,
+	.mv_nr_irqs    = NR_IRQS,
+	.mv_ioport_map = vitamin_hd5000_ioport_map,
+};
+// vim:ts=4
--- linux-sh4/drivers/net/phy/Kconfig.org
+++ linux-sh4/drivers/net/phy/Kconfig
@@ -119,5 +119,8 @@
 
 	  To compile this driver as a module, choose M here: the module
 	  will be called mdio-gpio.
+	  
+config TERIDIAN_78Q2123
+	tristate "Support for Teridian 78Q2123 ETH PHY"
 
 endif # PHYLIB
--- linux-sh4/drivers/net/phy/Makefile.org
+++ linux-sh4/drivers/net/phy/Makefile
@@ -21,3 +21,4 @@
 obj-$(CONFIG_NATIONAL_PHY)	+= national.o
 obj-$(CONFIG_STE10XP)		+= ste10Xp.o
 obj-$(CONFIG_MICREL_PHY)	+= micrel.o
+obj-$(CONFIG_TERIDIAN_78Q2123)	+= t78q2123.o
--- a/drivers/net/phy/t78q2123.c.org
+++ b/drivers/net/phy/t78q2123.c
@@ -0,0 +1,118 @@
+/*
+ * drivers/net/phy/t78q2123.c
+ *
+ * Driver for Teridian 78Q2123/78Q2133 PHY
+ *
+ * Author: Tomasz Szkutkowski <tomasz.szkutkowski@adp-technologies.com>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ */
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/moduleparam.h>
+#include <linux/interrupt.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mii.h>
+#include <linux/phy.h>
+
+#define T78Q2123_PHY_ID       0x000E7230
+#define T78Q2123_PHY_ID_MASK  0xFFFFFFF0
+#define T78Q2123_REG_INT      17
+#define T78Q2123_REG_INT_MASK 0x0500
+
+static int t78q21x3_config_init(struct phy_device *phydev)
+{
+	int value, err;
+
+	/* Software Reset PHY */
+	value = phy_read(phydev, MII_BMCR);
+	if (value < 0)
+	{
+		return value;
+	}
+	value |= BMCR_RESET;
+	err = phy_write(phydev, MII_BMCR, value);
+	if (err < 0)
+	{
+		return err;
+	}
+	do
+	{
+		value = phy_read(phydev, MII_BMCR);
+	}
+	while (value & BMCR_RESET);
+	return 0;
+}
+
+static int t78q21x3_config_intr(struct phy_device *phydev)
+{
+	int value = phy_read(phydev, T78Q2123_REG_INT);
+
+	if (phydev->interrupts == PHY_INTERRUPT_ENABLED) 
+	{
+		value |= T78Q2123_REG_INT_MASK;
+	}
+	else
+	{
+		value &= ~(T78Q2123_REG_INT_MASK);
+	}
+	return phy_write(phydev, T78Q2123_REG_INT, value);
+}
+
+static int t78q21x3_ack_interrupt(struct phy_device *phydev)
+{
+	int err = phy_read(phydev, T78Q2123_REG_INT);
+
+	if (err < 0)
+	{
+		return err;
+	}
+	return 0;
+}
+
+
+static struct phy_driver t78q21x3_pdriver =
+{
+	.phy_id        = T78Q2123_PHY_ID,
+	.phy_id_mask   = T78Q2123_PHY_ID_MASK,
+	.name          = "Teridan 78Q21x3 PHY",
+	.features      = PHY_BASIC_FEATURES,
+	.flags         = PHY_HAS_INTERRUPT,
+	.config_init   = t78q21x3_config_init,
+	.config_aneg   = genphy_config_aneg,
+	.read_status   = genphy_read_status,
+	.ack_interrupt = t78q21x3_ack_interrupt,
+	.config_intr   = t78q21x3_config_intr,
+	.suspend       = genphy_suspend,
+	.resume        = genphy_resume,
+	.driver        =
+		{
+			.owner = THIS_MODULE,
+		}
+};
+
+static int __init t78q21x3_init(void)
+{
+	printk("Teridian 78Q21x3 PHY driver init\n");
+	return phy_driver_register(&t78q21x3_pdriver);
+}
+
+static void __exit t78q21x3_exit(void)
+{
+	phy_driver_unregister(&t78q21x3_pdriver);
+}
+
+module_init(t78q21x3_init);
+module_exit(t78q21x3_exit);
+
+MODULE_DESCRIPTION("Teridian 78Q21x3 PHY driver");
+MODULE_AUTHOR("ADPT <contact@adp-technologies.com>");
+MODULE_LICENSE("GPL");
+// vim:ts=4
--- a/drivers/stm/stx7111.c.org
+++ b/drivers/stm/stx7111.c
@@ -432,15 +432,19 @@
 	struct sysconf_field *sc;
 	unsigned long devid;
 	unsigned long chip_revision;
+//	int i; //, j, k;
 
 	/* Initialise PIO and sysconf drivers */
 
 	sysconf_early_init(&stx7111_sysconf_device, 1);
+//	for (i = 0; i < 100000; i++) { for (j = 0; j < 100000; j++) { for (k = 0; k < 100000; k++) { k++; }}}
 	stm_gpio_early_init(stx7111_pio_devices,
 			ARRAY_SIZE(stx7111_pio_devices),
 			ILC_FIRST_IRQ + ILC_NR_IRQS);
+//	for (i = 0; i < 100000; i++) { for (j = 0; j < 100000; j++) { for (k = 0; k < 100000; k++) { k++;}}}
 	stm_pad_init(ARRAY_SIZE(stx7111_pio_devices) * STM_GPIO_PINS_PER_PORT,
 		     -1, 0, stx7111_pio_config);
+//	printk(KERN_INFO "oops!\n"); //for (i = 0; i < 10; i++) { i--; }
 
 	sc = sysconf_claim(SYS_DEV, 0, 0, 31, "devid");
 	devid = sysconf_read(sc);
--- a/drivers/stm/stx7111_comms.c.org
+++ b/drivers/stm/stx7111_comms.c
@@ -66,15 +66,15 @@
 			STM_PAD_PIO_OUT_NAMED(4, 5, 1, "RTS"),
 		},
 	},
-	[3] = {
-		.gpios_num = 4,
-		.gpios = (struct stm_pad_gpio []) {
-			STM_PAD_PIO_OUT(5, 0, 1),	/* TX */
-			STM_PAD_PIO_IN(5, 1, -1),	/* RX */
-			STM_PAD_PIO_IN_NAMED(5, 2, -1, "CTS"),
-			STM_PAD_PIO_OUT_NAMED(5, 3, 1, "RTS"),
-		},
-	},
+//	[3] = {
+//		.gpios_num = 4,
+//		.gpios = (struct stm_pad_gpio []) {
+//			STM_PAD_PIO_OUT(5, 0, 1),	/* TX */
+//			STM_PAD_PIO_IN(5, 1, -1),	/* RX */
+//			STM_PAD_PIO_IN_NAMED(5, 2, -1, "CTS"),
+//			STM_PAD_PIO_OUT_NAMED(5, 3, 1, "RTS"),
+//		},
+//	},
 };
 
 static struct platform_device stx7111_asc_devices[] = {
@@ -120,20 +120,20 @@
 			.pad_config = &stx7111_asc_pad_configs[2],
 		},
 	},
-	[3] = {
-		.name		= "stm-asc",
-		/* .id set in stx7111_configure_asc() */
-		.num_resources	= 4,
-		.resource	= (struct resource[]) {
-			STM_PLAT_RESOURCE_MEM(0xfd033000, 0x2c),
-			STM_PLAT_RESOURCE_IRQ(evt2irq(0x1100), -1),
-			STM_PLAT_RESOURCE_DMA_NAMED("rx_half_full", 14),
-			STM_PLAT_RESOURCE_DMA_NAMED("tx_half_empty", 18),
-		},
-		.dev.platform_data = &(struct stm_plat_asc_data) {
-			.pad_config = &stx7111_asc_pad_configs[3],
-		},
-	},
+//	[3] = {
+//		.name		= "stm-asc",
+//		/* .id set in stx7111_configure_asc() */
+//		.num_resources	= 4,
+//		.resource	= (struct resource[]) {
+//			STM_PLAT_RESOURCE_MEM(0xfd033000, 0x2c),
+//			STM_PLAT_RESOURCE_IRQ(evt2irq(0x1100), -1),
+//			STM_PLAT_RESOURCE_DMA_NAMED("rx_half_full", 14),
+//			STM_PLAT_RESOURCE_DMA_NAMED("tx_half_empty", 18),
+//		},
+//		.dev.platform_data = &(struct stm_plat_asc_data) {
+//			.pad_config = &stx7111_asc_pad_configs[3],
+//		},
+//	},
 };
 
 /* Note these three variables are global, and shared with the stasc driver
--- a/drivers/stm/gpio.c.org
+++ b/drivers/stm/gpio.c
@@ -28,13 +28,18 @@
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
 #include <linux/stm/pm_sys.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include "reg_pio.h"
 
 
 
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
	void (*func)(struct stpio_pin *pin, void *dev);
	void* dev;
	unsigned short port_no, pin_no;
 #endif
@@ -52,6 +57,7 @@
 #ifdef CONFIG_HIBERNATION
 	unsigned char pm_saved_data;
 #endif
+	unsigned char direction;
 	struct stpio_pin stpio;
 };
 
@@ -392,6 +398,9 @@
 
 	gpio_pm_set_direction(&port->pins[offset], direction);
 	set__PIO_PCx(port->base, offset, direction);
+
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 }
 
 
@@ -510,6 +519,10 @@
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+	stpio_configure_pin(pin, STPIO_IN);
+	pin->pin_name = NULL;
+	pin->func = 0;
+	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -624,6 +637,97 @@
 	set_irq_type(irq, triggertype);
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
+#ifdef CONFIG_PROC_FS
+
+static struct proc_dir_entry *proc_stpio;
+
+static inline const char *stpio_get_direction_name(unsigned int direction)
+{
+	switch (direction) {
+	case STPIO_NONPIO:     return "IN  (pull-up)      ";
+	case STPIO_BIDIR:      return "BI  (open-drain)   ";
+	case STPIO_OUT:        return "OUT (push-pull)    ";
+	case STPIO_IN:         return "IN  (Hi-Z)         ";
+	case STPIO_ALT_OUT:    return "Alt-OUT (push-pull)";
+	case STPIO_ALT_BIDIR:  return "Alt-BI (open-drain)";
+	default:               return "forbidden          ";
+	}
+};
+
+static inline const char *stpio_get_handler_name(void *func)
+{
+	static char sym_name[KSYM_NAME_LEN];
+	char *modname;
+	unsigned long symbolsize, offset;
+	const char *symb;
+
+	if (func == NULL)
+	{
+		return "";
+	}
+	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+			&modname, sym_name);
+
+	return symb ? symb : "???";
+}
+
+static int stpio_read_proc(char *page, char **start, off_t off, int count,
+		int *eof, void *data_unused)
+{
+	int len;
+	int port_no, pin_no;
+	off_t begin = 0;
+	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	struct stm_gpio_port *port;
+	struct stm_gpio_pin *pin;
+	char *name;
+
+	len = sprintf(page, "  port      name          direction\n");
+	for (port_no = 0; port_no < num_ports; port_no++)
+	{
+		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++)
+		{
+
+			port = &stm_gpio_ports[port_no];
+			if (!port)
+			{
+				continue;
+			}
+			pin = &port->pins[pin_no];
+			if (!pin)
+			{
+				continue;
+			}
+			name = (char *)(pin->stpio.pin_name ? pin->stpio.pin_name : "");
+			len += sprintf(page + len,
+					"PIO %d.%d [%-10s] [%s] [%s]\n",
+					port_no, pin_no, name,
+					stpio_get_direction_name(pin->direction),
+					stpio_get_handler_name(pin->stpio.func));
+ 			if (len + begin > off + count)
+			{
+				goto done;
+			}
+			if (len + begin < off)
+			{
+				begin += len;
+				len = 0;
+			}
+		}
+	}
+
+	*eof = 1;
+
+done:
+	if (off >= len + begin)
+	{
+		return 0;
+	}
+	*start = page + (off - begin);
+	return ((count < begin + len - off) ? count : begin + len - off);
+}
+
+#endif /* CONFIG_PROC_FS */
 
 #endif /* CONFIG_STPIO */
 
@@ -1031,7 +1134,13 @@
 static int __init stm_gpio_init(void)
 {
 	int ret;
-
+#ifdef CONFIG_PROC_FS
+	proc_stpio = create_proc_entry("stpio", 0, NULL);
+	if (proc_stpio)
+	{
+		proc_stpio->read_proc = stpio_read_proc;
+	}
+#endif
 	ret = platform_driver_register(&stm_gpio_driver);
 	if (ret)
 		return ret;


