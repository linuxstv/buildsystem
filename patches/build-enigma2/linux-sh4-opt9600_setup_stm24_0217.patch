--- a/arch/sh/kernel/setup.c.org
+++ b/arch/sh/kernel/setup.c
@@ -420,6 +420,44 @@
 #endif
 #endif
 
+	{
+		int command_line_len = strlen(command_line);
+		char sda1_org_command_line[] = "console=ttyAS0,115200 root=/dev/sda1";
+		char sda1_new_command_line[] = "console=ttyAS0,115200 root=/dev/sda1 rw init=/bin/devinit ip=$ipaddr:$serverip:$gateway:$netmask:edision:eth0:off coprocessor_mem=4m@0x10000000,4m@0x10400000 rootdelay=5 mem=128m Manufacture=STi7101_YW-MOON-IBOX-VER1.0_EDISION STB_ID=03:05:08:00:00:20:8C nwhwconf=device:eth0,hwaddr:";
+		char sdb1_org_command_line[] = "console=ttyAS0,115200 root=/dev/sdb1";
+		char sdb1_new_command_line[] = "console=ttyAS0,115200 root=/dev/sdb1 rw init=/bin/devinit ip=$ipaddr:$serverip:$gateway:$netmask:edision:eth0:off coprocessor_mem=4m@0x10000000,4m@0x10400000 rootdelay=5 mem=128m Manufacture=STi7101_YW-MOON-IBOX-VER1.0_EDISION STB_ID=03:05:08:00:00:20:8C nwhwconf=device:eth0,hwaddr:";
+		char mac[] = "12:34:56:78:9A:BC";
+		int sda1_org_command_line_len = strlen(sda1_org_command_line);
+		int sdb1_org_command_line_len = strlen(sdb1_org_command_line);
+		int i;
+
+		for (i = 0; i < (command_line_len - 7); i++)
+		{
+			if (!strncmp(command_line + i, "ethaddr", 7))
+			{
+				strlcpy(mac, command_line + i + 8, sizeof(mac));
+				break;
+			}
+			if (!strncmp(command_line + i, "hwaddr", 6))
+			{
+				strlcpy(mac, command_line + i + 7, sizeof(mac));
+				break;
+			}
+		}
+		/* boot from /dev/sda1 */
+		if (command_line_len >= sda1_org_command_line_len && !strncmp(command_line, sda1_org_command_line, sda1_org_command_line_len))
+		{
+			strlcpy(command_line, sda1_new_command_line, sizeof(sda1_new_command_line));
+			strlcat(command_line, mac, sizeof(mac));
+		}
+		/* boot from /dev/sdb1 */
+		if (command_line_len >= sdb1_org_command_line_len && !strncmp(command_line, sdb1_org_command_line, sdb1_org_command_line_len))
+		{
+			strlcpy(command_line, sdb1_new_command_line, sizeof(sdb1_new_command_line));
+			strlcat(command_line, mac, sizeof(mac));
+		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
@@ -587,6 +625,7 @@
 	seq_printf(m, "cpu family\t: %s\n", init_utsname()->machine);
 	seq_printf(m, "cpu variant\t: %s\n", get_cpu_variant(c));
	seq_printf(m, "cpu type\t: %s\n", get_cpu_subtype(c));
+	seq_printf(m, "cpu MHz\t\t: 266\n");
 	if (c->cut_major == -1)
 		seq_printf(m, "cut\t\t: unknown\n");
 	else if (c->cut_minor == -1)
--- a/arch/sh/boards/mach-mb442/mach.c.org
+++ b/arch/sh/boards/mach-mb442/mach.c
@@ -1,13 +1,17 @@
 /*
  * arch/sh/boards/st/mb442/mach.c
  *
+ * Modified for use on Opticum (TS) HD 9600 by
+ * Audioniek.
+ *
+ * Original code by:
  * Copyright (C) 2005 STMicroelectronics Limited
  * Author: Stuart Menefy (stuart.menefy@st.com)
  *
  * May be copied or modified under the terms of the GNU General Public
  * License.  See linux/COPYING for more information.
  *
- * Machine vector for the STMicroelectronics STb7100 Reference board.
+ * Machine vector for the  Opticum HD (TS) 9600 board.
  */
 
 #include <linux/init.h>
@@ -17,7 +21,7 @@
 #include <asm/machvec.h>
 #include <asm/irq-stx7100.h>
 
-static void __iomem *mb442_ioport_map(unsigned long port, unsigned int size)
+static void __iomem *opt9600_ioport_map(unsigned long port, unsigned int size)
 {
 #ifdef CONFIG_BLK_DEV_ST40IDE
 	/*
@@ -35,7 +39,7 @@
 	return (void __iomem *)CCN_PVR;
 }
 
-static void __init mb442_init_irq(void)
+static void __init opt9600_init_irq(void)
 {
 	/* enable individual interrupt mode for externals */
 	plat_irq_setup_pins(IRQ_MODE_IRQ);
@@ -49,12 +53,13 @@
 	ilc_route_external(ILC_EXT_MDINT, 7, 0);	/* STe100 PHY */
 }
 
-void __init mb442_setup(char**);
+void __init opt9600_setup(char**);
 
 static struct sh_machine_vector mv_mb442 __initmv = {
-	.mv_name		= "STb7100 Reference board",
-	.mv_setup		= mb442_setup,
+	.mv_name		= "Opticum HD (TS) 9600",
+	.mv_setup		= opt9600_setup,
 	.mv_nr_irqs		= NR_IRQS,
-	.mv_init_irq		= mb442_init_irq,
-	.mv_ioport_map		= mb442_ioport_map,
+	.mv_init_irq		= opt9600_init_irq,
+	.mv_ioport_map		= opt9600_ioport_map,
 };
+//vim:ts=4
--- a/arch/sh/boards/mach-mb442/setup.c.org
+++ b/arch/sh/boards/mach-mb442/setup.c
@@ -1,13 +1,17 @@
 /*
  * arch/sh/boards/st/mb442/setup.c
  *
+ * Modified for use on Opticum HD (TS) 9600 by
+ * Audioniek.
+ *
+ * Original code by:
  * Copyright (C) 2005 STMicroelectronics Limited
  * Author: Stuart Menefy (stuart.menefy@st.com)
  *
  * May be copied or modified under the terms of the GNU General Public
  * License.  See linux/COPYING for more information.
  *
- * STMicroelectronics STb7100 Reference board support.
+ * Opticum HD (TS) 9600 support.
  */
 
 #include <linux/init.h>
@@ -22,142 +26,237 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
-
-
-
-#define MB442_PIO_STE100P_RESET stm_gpio(2, 4)
-#define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
-#define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
-
-
-
-void __init mb442_setup(char** cmdline_p)
-{
-	printk("STMicroelectronics STb7100 Reference board initialisation\n");
+#include <linux/bpa2.h>
+
+#if 0
+I = input (PU)
+b = bidir
+o = output
+i = input
+O = alt.output
+B = alt.bidir
+
+PIO0.0 (B) = SCI0.TXD (=SCI0.IOUC)
+PIO0.1 (I) = SCI0.RXD (=SCI0.IOUC)
+PIO0.2 (I) = SCI0.EXTCLKIN
+PIO0.3 (o) = SCI0.CLKOUT (=SCI0.XTA1)
+PIO0.4 (o) = SCI0.RESET (=SCI0.RSTIN)
+PIO0.5 (o) = SCI0.CONDVCC (=SCI0.CMDVCC#)
+PIO0.6 (o) = SCI0.VSEL (=SCI0.5V/3V3#)
+PIO0.7 (i) = SCI0.DETECT (=SCI0.OFF#)
+
+PIO1.0 (B) = SCI1.TXD (=SCI1.IOUC)
+PIO1.1 (I) = SCI1.RXD (=SCI1.IOUC)
+PIO1.2 (I) = SCI1.EXTCLKIN
+PIO1.3 (o) = SCI1.CLKOUT (=SCI1.XTA1)
+PIO1.4 (o) = SCI1.RESET (=SCI1.RSTIN)
+PIO1.5 (o) = SCI1.CONDVCC (=SCI1.CMDVCC#)
+PIO1.6 (o) = SCI1.VSEL (=SCI1.5V/3V3#)
+PIO1.7 (i) = SCI1.DETECT (=SCI1.OFF#)
+
+PIO2.0 (B) = I2C0_SCL
+PIO2.1 (B) = I2C0_SDA
+PIO2.2 (o) = TUNER_LNBP_VSEL
+PIO2.3 (o) = TUNER_LNBP_ENT (n.c., RB20 = NP)
+PIO2.4 (i) = STARCI_INT
+PIO2.5 (o) = TUNER_DVBTPWREN#
+PIO2.6 (o) = TUNER_LNBP_LLC
+PIO2.7 (I) = ?? flash Vpp ??
+
+PIO3.0 (B) = I2C1_SCL
+PIO3.1 (B) = I2C1_SDA
+PIO3.2 (o) =
+PIO3.3 (o) = TUNER_DVBS2OE#
+PIO3.4 (o) =
+PIO3.5 (o) = AMUX_SEL
+PIO3.6 (o) = ETH_RESET
+PIO3.7 (I) = ETH_X1
+
+PIO4.0 (B) = I2C2_SCL
+PIO4.1 (B) = I2C2_SDA
+PIO4.2 (I) = ASC2_RXD  // console
+PIO4.3 (O) = ASC2_TXD  // console
+PIO4.4 (i) = HDMI_HPD
+PIO4.5 (u) = HDMI_CEC
+PIO4.6 (o) = TUNER_DVBS2PWREN#
+PIO4.7 (o) = CAM_U_PWREN
+
+PIO5.0 (O) = ASC3_TXD  // front uC
+PIO5.1 (I) = ASC3_RXD  // front uC
+PIO5.2 (o) = TUNER_LNBP_EN
+PIO5.3 (o) = TUNER_RESET
+PIO5.4 (o) = CAM_L_PWREN
+PIO5.5 (o) = STARCI_RESET
+PIO5.6 (i) = USBOVRCUR#
+PIO5.7 (o) = USBPWREN
+#endif
+
+#define OPT9600_PIO_STE100P_RESET stm_gpio(3, 6)
+#define OPT9600_PIO_FLASH_VPP stm_gpio(2, 7)
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", "v4l2-coded-video-buffers", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] =
+{
+	{
+		.name  = "LMI_VID",
+		.start = 0x10800000,
+		.size  = 0x03400000,  // 52 Mbyte
+		.flags = 0,
+		.aka   = LMI_VID_partalias
+	},
+	{
+		.name  = "LMI_SYS",
+		.start = 0x00000000,  // -> 1st free low RAM address
+		.size  = 0x01800000,  // 24 Mbyte
+		.flags = 0,
+		.aka   = LMI_SYS_partalias
+	}
+};
+
+void __init opt9600_setup(char** cmdline_p)
+{
+	printk("Opticum HD (TS) 9600\n");
 
 	stx7100_early_device_init();
 
-	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
-			.is_console = 1, });
-	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
-			.is_console = 0, });
-}
-
-static struct resource mb442_smc91x_resources[] = {
-	[0] = {
-		.start	= 0x02000300,
-		.end	= 0x02000300 + 0xff,
-		.flags	= IORESOURCE_MEM,
-	},
-	[1] = {
-		.start	= IRL0_IRQ,
-		.end	= IRL0_IRQ,
-		.flags	= IORESOURCE_IRQ,
-	},
-};
-
-static struct platform_device mb442_smc91x_device = {
-	.name		= "smc91x",
-	.id		= 0,
-	.num_resources	= ARRAY_SIZE(mb442_smc91x_resources),
-	.resource	= mb442_smc91x_resources,
-};
-
-static void mb442_set_vpp(struct map_info *info, int enable)
-{
-	gpio_set_value(MB442_PIO_FLASH_VPP, enable);
-}
-
-static struct platform_device mb442_physmap_flash = {
+//	Console UART
+	stx7100_configure_asc(2, &(struct stx7100_asc_config)
+	{
+		.hw_flow_control = 0,
+		.is_console = 1,
+	});
+//	Front controller UART
+	stx7100_configure_asc(3, &(struct stx7100_asc_config)
+	{
+		.hw_flow_control = 0,
+		.is_console = 0,
+	});
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+static void opt9600_set_vpp(struct map_info *info, int enable)
+{
+	gpio_set_value(OPT9600_PIO_FLASH_VPP, enable);
+}
+
+static struct platform_device opt9600_physmap_flash =
+{
 	.name		= "physmap-flash",
 	.id		= -1,
 	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
+	.resource	= (struct resource[])
+	{
+		STM_PLAT_RESOURCE_MEM(0, 8 * 1024 * 1024),
 	},
-	.dev.platform_data = &(struct physmap_flash_data) {
+	.dev.platform_data = &(struct physmap_flash_data)
+	{
 		.width		= 2,
-		.set_vpp	= mb442_set_vpp,
+		.set_vpp	= opt9600_set_vpp,
 	},
 };
 
-
-static int mb442_phy_reset(void* bus)
-{
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-
+static int opt9600_phy_reset(void* bus)
+{
+	gpio_set_value(OPT9600_PIO_STE100P_RESET, 1);
+	udelay(1);
+	gpio_set_value(OPT9600_PIO_STE100P_RESET, 0);
+	udelay(1);
+	gpio_set_value(OPT9600_PIO_STE100P_RESET, 1);
 	return 1;
 }
 
-#define STMMAC_PHY_ADDR 14
+#define STMMAC_PHY_ADDR 6
 static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
 	[STMMAC_PHY_ADDR] = IRL3_IRQ,
 };
+
 static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
 	.bus_id = 0,
-	.phy_reset = mb442_phy_reset,
+	.phy_reset = opt9600_phy_reset,
 	.phy_mask = 1,
 	.irqs = stmmac_phy_irqs,
 };
 
-static struct platform_device *mb442_devices[] __initdata = {
-	&mb442_smc91x_device,
-	&mb442_physmap_flash,
-};
-
-static int __init mb442_device_init(void)
-{
-	stx7100_configure_sata();
-
-	stx7100_configure_pwm(&(struct stx7100_pwm_config) {
-			.out0_enabled = 0,
-			.out1_enabled = 1, });
-
-	stx7100_configure_ssc_i2c(0, NULL);
-	stx7100_configure_ssc_spi(1, NULL);
-	stx7100_configure_ssc_i2c(2, NULL);
+static struct platform_device *opt9600_devices[] __initdata =
+{
+	&opt9600_physmap_flash,
+};
+
+static int __init opt9600_device_init(void)
+{
+#if 0
+	/* Temporary: try and find the PIO's */
+	int i;
+	int j;
+#define SLEEP 300
+	for (i = 0; i < 6; i++)
+	{
+		for (j = 0; j < 8; j++)
+		{
+
+			if ((j == 2 && i == 4) || (j == 3 && i == 4))
+			{
+				printk("Skip GPIO(%1d.%1d)\n", i, j);
+			}
+			else
+			{
+				stm_gpio_direction(stm_gpio(i, j), STM_GPIO_DIRECTION_OUT);
+				gpio_set_value(stm_gpio(i, j), 0);
+				printk("GPIO(%1d.%1d): ", i, j);
+				printk("off ");
+				mdelay(SLEEP);
+				gpio_set_value(stm_gpio(i, j), 1);
+				printk("on ");
+				mdelay(SLEEP);
+				gpio_set_value(stm_gpio(i, j), 0);
+				printk("off ");
+				mdelay(SLEEP);
+				stm_gpio_direction(stm_gpio(i, j), STM_GPIO_DIRECTION_IN);
+				printk("set to input\n");
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+				mdelay(SLEEP);
+			}
+		}
+	}
+#endif
+//	stx7100_configure_sata();
+
+	stx7100_configure_ssc_i2c(0);
+	stx7100_configure_ssc_i2c(1);
+	stx7100_configure_ssc_i2c(2);
 
 	stx7100_configure_usb();
 
-	stx7100_configure_lirc(&(struct stx7100_lirc_config) {
-			.rx_mode = stx7100_lirc_rx_mode_ir,
-			.tx_enabled = 0,
-			.tx_od_enabled = 0, });
-
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
-	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
-
-	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
-	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
-
-	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
-			.mode = stx7100_ethernet_mode_mii,
-			.ext_clk = 0,
-			.phy_bus = 0,
-			.phy_addr = STMMAC_PHY_ADDR,
-			.mdio_bus_data = &stmmac_mdio_bus,
-		});
-
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
-
-	return platform_add_devices(mb442_devices,
-			ARRAY_SIZE(mb442_devices));
-}
-device_initcall(mb442_device_init);
+	gpio_request(OPT9600_PIO_FLASH_VPP, "Flash VPP");
+	gpio_direction_output(OPT9600_PIO_FLASH_VPP, 0);
+
+	gpio_request(OPT9600_PIO_STE100P_RESET, "STE100P reset");
+	gpio_direction_output(OPT9600_PIO_STE100P_RESET, 1);
+
+	stx7100_configure_ethernet(&(struct stx7100_ethernet_config)
+	{
+		.mode = stx7100_ethernet_mode_mii,
+		.ext_clk = 0,
+		.phy_bus = 0,
+		.phy_addr = STMMAC_PHY_ADDR,
+		.mdio_bus_data = &stmmac_mdio_bus,
+	});
+
+	/* Reset the STM STE100P Ethernet chip */
+	gpio_direction_output(OPT9600_PIO_STE100P_RESET, 0);
+	udelay(1);
+	gpio_set_value(OPT9600_PIO_STE100P_RESET, 1);
+	udelay(1);
+	gpio_set_value(OPT9600_PIO_STE100P_RESET, 0);
+
+	return platform_add_devices(opt9600_devices, ARRAY_SIZE(opt9600_devices));
+}
+device_initcall(opt9600_device_init);
+// vim:ts=4
--- a/drivers/net/phy/phy_device.c.orig
+++ b/drivers/net/phy/phy_device.c
@@ -1104,7 +1104,7 @@
 		return retval;
 	}
 
-	pr_debug("%s: Registered new driver\n", new_driver->name);
+ 	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);  
 
 	return 0;
 }
--- a/drivers/net/stmmac/stmmac_mdio.c.orig
+++ b/drivers/net/stmmac/stmmac_mdio.c
@@ -194,9 +194,18 @@
 			 * and no PHY number was provided to the MAC,
 			 * use the one probed here.
 			 */
-			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
-			    (priv->plat->phy_addr == -1))
-				priv->plat->phy_addr = addr;
+
+			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && ((priv->plat->phy_addr == -1)
+			||  (phydev->phy_id == 0x0181b880)   // Davicom DM9161E
+			||  (phydev->phy_id == 0x0181b8a0)   // Davicom DM9161A
+			||  (phydev->phy_id == 0x00181b80)   // Davicom DM9131
+			||  (phydev->phy_id == 0x1c040011)   // STe100p
+			||  (phydev->phy_id == 0x00061c50)   // STe101p
+			||  (phydev->phy_id == 0x001cc912)   // RTL821x
+			||  (phydev->phy_id == 0x00008201))) // RTL8201
+			{
+				priv->plat->phy_addr = addr;
+			}
 
 			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
 				(priv->plat->phy_addr == addr);
--- a/include/linux/stm/stx7100.h.orig
+++ b/include/linux/stm/stx7100.h
@@ -34,15 +34,11 @@
 };
 void stx7100_configure_asc(int asc, struct stx7100_asc_config *config);
 
-
-struct stx7100_ssc_i2c_config {
-	unsigned int fastmode:1;
-};
 struct stx7100_ssc_spi_config {
 	void (*chipselect)(struct spi_device *spi, int is_on);
 };
 /* SSC configure functions return I2C/SPI bus number */
-int stx7100_configure_ssc_i2c(int ssc, struct stx7100_ssc_i2c_config *config);
+int stx7100_configure_ssc_i2c(int ssc);
 int stx7100_configure_ssc_spi(int ssc, struct stx7100_ssc_spi_config *config);
 
 
 struct stx7100_lirc_config {
--- a/drivers/stm/gpio.c.orig
+++ b/drivers/stm/gpio.c
@@ -27,13 +27,17 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
-#include <linux/stm/pm_sys.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include "reg_pio.h"
 
 
 
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
 	void (*func)(struct stpio_pin *pin, void *dev);
 	void* dev;
 	unsigned short port_no, pin_no;
@@ -49,50 +53,10 @@
 #define PIN_IGNORE_FALLING_EDGE	(PIN_IGNORE_EDGE_FLAG | 1)
 #define PIN_IGNORE_EDGE_MASK	(PIN_IGNORE_EDGE_FLAG | PIN_IGNORE_EDGE_VAL)
 
-#ifdef CONFIG_HIBERNATION
-	unsigned char pm_saved_data;
-#endif
+	unsigned char direction;
 	struct stpio_pin stpio;
 };
 
-#ifdef CONFIG_HIBERNATION
-#define GPIO_DIR_MASK  0x7f
-#define GPIO_VAL_MASK  0x80
-static inline void gpio_pm_set_direction(struct stm_gpio_pin *pin,
-	unsigned int dir)
-{
-	pin->pm_saved_data &= ~GPIO_DIR_MASK;
-	pin->pm_saved_data |= dir & GPIO_DIR_MASK;
-}
-
-static inline unsigned char gpio_pm_get_direction(struct stm_gpio_pin *pin)
-{
-	return pin->pm_saved_data & GPIO_DIR_MASK;
-}
-
-static inline void gpio_pm_set_value(struct stm_gpio_pin *pin, int val)
-{
-	pin->pm_saved_data &= ~GPIO_VAL_MASK;
-	pin->pm_saved_data |= (val ? GPIO_VAL_MASK : 0);
-}
-
-static inline int gpio_pm_get_value(struct stm_gpio_pin *pin)
-{
-	return (pin->pm_saved_data & GPIO_VAL_MASK) ? 1 : 0;
-}
-#else
-static inline void gpio_pm_set_direction(struct stm_gpio_pin *pin,
-	unsigned int dir)
-{
-	return;
-}
-
-static inline void gpio_pm_set_value(struct stm_gpio_pin *pin, int val)
-{
-	return;
-}
-
-#endif
 
 #define to_stm_gpio_port(chip) \
 		container_of(chip, struct stm_gpio_port, gpio_chip)
@@ -105,6 +69,8 @@
 	void *base;
 	unsigned long irq_level_mask;
 	struct stm_gpio_pin pins[STM_GPIO_PINS_PER_PORT];
+	struct sys_device sysdev;
+	pm_message_t pm_state;
 };
 
 struct stm_gpio_irqmux {
@@ -112,7 +78,7 @@
 	int port_first;
 };
 
-
+static struct sysdev_class stm_gpio_sysdev_class;
 
 
 int stm_gpio_num; /* Number of available internal PIOs (pins) */
@@ -374,7 +340,6 @@
 static inline void __stm_gpio_set(struct stm_gpio_port *port, unsigned offset,
 		int value)
 {
-	gpio_pm_set_value(&port->pins[offset], value);
 	if (value)
 		set__PIO_SET_POUT__SET_POUT__SET(port->base, offset);
 	else
@@ -390,8 +355,11 @@
 			direction != STM_GPIO_DIRECTION_ALT_OUT &&
 			direction != STM_GPIO_DIRECTION_ALT_BIDIR);
 
-	gpio_pm_set_direction(&port->pins[offset], direction);
+	port->pins[offset].direction = direction;
 	set__PIO_PCx(port->base, offset, direction);
+
+	if (!port->pins[offset].stpio.pin_name)
+                port->pins[offset].stpio.pin_name = "-----";
 }
 
 
@@ -424,7 +392,11 @@
 
 static int stm_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
 {
-	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_IN);
+	struct stm_gpio_port *port = to_stm_gpio_port(chip);
+
+	set__PIO_PCx__INPUT_HIGH_IMPEDANCE(port->base, offset);
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 
 	return 0;
 }
@@ -436,7 +408,9 @@
 
 	__stm_gpio_set(port, offset, value);
 
-	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_OUT);
+	set__PIO_PCx__OUTPUT_PUSH_PULL(port->base, offset);
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 
 	return 0;
 }
@@ -504,12 +478,17 @@
 	gpio_pin->stpio.port_no = port_no;
 	gpio_pin->stpio.pin_no = pin_no;
 
+	gpio_pin->stpio.pin_name = (name==NULL) ? "-----" : name;
 	return &gpio_pin->stpio;
 }
 EXPORT_SYMBOL(__stpio_request_pin);
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+	stpio_configure_pin(pin, STPIO_IN);
+	pin->pin_name = NULL;
+	pin->func = 0;
+	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -625,6 +604,88 @@
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
 
+#ifdef CONFIG_PROC_FS
+
+static struct proc_dir_entry *proc_stpio;
+
+static inline const char *stpio_get_direction_name(unsigned int direction)
+{
+	switch (direction) {
+	case STPIO_NONPIO:                return "IN (pull-up) ";
+	case STPIO_BIDIR:                return "BI (open-drain) ";
+	case STPIO_OUT:                        return "OUT (push-pull) ";
+	case STPIO_IN:                        return "IN (Hi-Z) ";
+	case STPIO_ALT_OUT:                return "Alt-OUT (push-pull)";
+	case STPIO_ALT_BIDIR:        return "Alt-BI (open-drain)";
+	default:                                return "forbidden ";
+	}
+};
+
+static inline const char *stpio_get_handler_name(void *func)
+{
+	static char sym_name[KSYM_NAME_LEN];
+	char *modname;
+	unsigned long symbolsize, offset;
+	const char *symb;
+
+	if (func == NULL)
+		return "";
+
+	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+		&modname, sym_name);
+
+	return symb ? symb : "???";
+}
+
+static int stpio_read_proc(char *page, char **start, off_t off, int count,
+                           int *eof, void *data_unused)
+{
+	int len;
+	int port_no, pin_no;
+	off_t begin = 0;
+	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	const char *name;
+	struct stm_gpio_port *port;
+	struct stm_gpio_pin *pin;
+
+	len = sprintf(page, " port name direction\n");
+	for (port_no = 0; port_no < num_ports; port_no++)
+	{
+		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++)
+		{
+			port = &stm_gpio_ports[port_no];
+			if (!port)
+				continue;
+			pin = &port->pins[pin_no];
+			if (!pin)
+				continue;
+			name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+			len += sprintf(page + len,
+				"PIO %d.%d [%-10s] [%s] [%s]\n",
+				port_no, pin_no, name,
+				stpio_get_direction_name(pin->direction),
+				stpio_get_handler_name(pin->stpio.func));
+
+			if (len + begin > off + count)
+				goto done;
+			if (len + begin < off) {
+				begin += len;
+				len = 0;
+			}
+		}
+	}
+
+	*eof = 1;
+
+done:
+	if (off >= len + begin)
+		return 0;
+	*start = page + (off - begin);
+	return ((count < begin + len - off) ? count : begin + len - off);
+}
+
+#endif /* CONFIG_PROC_FS */
+
 #endif /* CONFIG_STPIO */
 
 
@@ -801,6 +862,7 @@
 	struct stm_gpio_port *port = &stm_gpio_ports[port_no];
 	struct resource *memory;
 	int irq;
+	int ret;
 
 	BUG_ON(port_no < 0);
 	BUG_ON(port_no >= stm_gpio_num);
@@ -828,7 +890,11 @@
 	port->gpio_chip.label = dev_name(&pdev->dev);
 	dev_set_drvdata(&pdev->dev, port);
 
-	return 0;
+	port->sysdev.id = port_no;
+	port->sysdev.cls = &stm_gpio_sysdev_class;
+	ret = sysdev_register(&port->sysdev);
+	if (ret)
+		return ret;
 
 	/* This is a good time to check consistency of linux/stm/gpio.h
 	 * declarations with the proper source... */
@@ -920,46 +986,18 @@
 /*** Drivers initialization ***/
 
 #ifdef CONFIG_PM
-#ifdef CONFIG_HIBERNATION
-/*
- * platform_allow_pm_gpio
- * Every platform implementation of this function has to check if
- * a specific gpio_pin can be managed or not in the PM core code
- */
-int __weak platform_allow_pm_gpio(int gpio, int freezing)
-{
-	return 1;
-}
-
-static int stm_gpio_port_restore(struct stm_gpio_port *port)
+static int stm_gpio_hibernation_resume(struct stm_gpio_port *port)
 {
 	int pin_no;
 
-	for (pin_no = 0; pin_no < port->gpio_chip.ngpio; ++pin_no) {
-		struct stm_gpio_pin *pin = &port->pins[pin_no];
-
-		if (!platform_allow_pm_gpio(
-			stm_gpio(port - stm_gpio_ports, pin_no), 0))
-			continue;
+	for (pin_no = 0; pin_no < port->gpio_chip.ngpio; ++pin_no)
 		/*
-		 * Direction can not be zero! Zero means 'un-claimed'
-		 */
-		if (!gpio_pm_get_direction(pin)) {
-			/*
-			 * On some chip the reset value ins't DIRECTION_IN...
-			 */
+		* Direction can not be zero!
+		* Zero means 'un-claimed'
+		*/
+		if (port->pins[pin_no].direction)
 			__stm_gpio_direction(port, pin_no,
-					STM_GPIO_DIRECTION_IN);
-			/* reset again to say 'un-claimed' as it was */
-			gpio_pm_set_direction(pin, 0);
-			continue;
-		}
-
-		/*
-		 * In case of Direction_Out set the Out value
-		 */
-		if (STM_GPIO_DIRECTION_OUT == gpio_pm_get_direction(pin))
-			__stm_gpio_set(port, pin_no, gpio_pm_get_value(pin));
+				port->pins[pin_no].direction);
 
 		__stm_gpio_direction(port, pin_no, gpio_pm_get_direction(pin));
 
@@ -967,21 +1005,7 @@
 	return 0;
 }
 
-static int stm_gpio_restore(void)
-{
-	int port_no, ret = 0;
-	int port_num = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
-
-	for (port_no = 0; port_no < port_num; ++port_no)
-		ret |= stm_gpio_port_restore(&stm_gpio_ports[port_no]);
-
-	return ret;
-}
-#else
-#define stm_gpio_restore	NULL
-#endif
-
-static int stm_gpio_port_suspend(struct stm_gpio_port *port)
+static int stm_gpio_suspend(struct stm_gpio_port *port)
 {
 	int port_no = port - stm_gpio_ports;
 	int pin_no;
@@ -1000,37 +1024,61 @@
 	return 0;
 }
 
-static int stm_gpio_suspend(void)
+static int stm_gpio_sysdev_suspend(struct sys_device *dev, pm_message_t state)
 {
-	int port_no, ret = 0;
-	int port_num = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	struct stm_gpio_port *port = sysdev_to_stm_gpio(dev);
+	int ret = 0;
 
-	for (port_no = 0; port_no < port_num; ++port_no)
-		ret |= stm_gpio_port_suspend(&stm_gpio_ports[port_no]);
+	switch (state.event) {
+	case PM_EVENT_ON:
+		if (port->pm_state.event != PM_EVENT_FREEZE)
+			break;
+		ret = stm_gpio_hibernation_resume(port);
+		break;
 
-	return ret;
-}
+	case PM_EVENT_SUSPEND:
+		ret = stm_gpio_suspend(port);
+			break;
+
+	case PM_EVENT_FREEZE:
+		/* do nothing */
+		break;
+	}
+ 
+	port->pm_state = state;
 
 
-static struct stm_system stm_gpio_system = {
-	.name = "gpio",
-	.priority = stm_gpio_pr,
-	.suspend = stm_gpio_suspend,
-	.freeze = stm_gpio_suspend,
-	.restore = stm_gpio_restore,
-};
+	return ret;
+}
 
-static int stm_gpio_subsystem_init(void)
+static int stm_gpio_sysdev_resume(struct sys_device *dev)
 {
-	return stm_register_system(&stm_gpio_system);
+	return stm_gpio_sysdev_suspend(dev, PMSG_ON);
 }
 
-module_init(stm_gpio_subsystem_init);
+#else
+#define stm_gpio_sysdev_suspend NULL
+#define stm_gpio_sysdev_resume NULL
 #endif
 
+static struct sysdev_class stm_gpio_sysdev_class = {
+	.name = "stm-gpio",
+	.suspend = stm_gpio_sysdev_suspend,
+	.resume = stm_gpio_sysdev_resume,
+};
+
 static int __init stm_gpio_init(void)
 {
 	int ret;
+#ifdef CONFIG_PROC_FS
+	proc_stpio = create_proc_entry("stpio", 0, NULL);
+	if (proc_stpio)
+		proc_stpio->read_proc = stpio_read_proc;
+#endif
+
+	ret = sysdev_class_register(&stm_gpio_sysdev_class);
+	if (ret)
+		return ret;
 
 	ret = platform_driver_register(&stm_gpio_driver);
 	if (ret)
--- a/drivers/stm/stx7100_comms.c.orig
+++ b/drivers/stm/stx7100_comms.c
@@ -226,12 +226,10 @@
 			STM_PAD_PIO_BIDIR_NAMED(2, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(2, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC0_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 1, 1, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[1] = {
@@ -334,8 +332,7 @@
 
 static int __initdata stx7100_ssc_configured[ARRAY_SIZE(stx7100_ssc_devices)];
 
-int __init stx7100_configure_ssc_i2c(int ssc,
-		struct stx7100_ssc_i2c_config *config)
+int __init stx7100_configure_ssc_i2c(int ssc)
 {
 	static int i2c_busnum;
 	struct stm_plat_ssc_data *plat_data;
@@ -345,13 +342,11 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
 	plat_data->pad_config = &stx7100_ssc_i2c_pad_configs[ssc];
-	if (config)
-		plat_data->i2c_fastmode = config->fastmode;
 
 	/* I2C bus number reservation (to prevent any hot-plug device
 	 * from using it) */
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -83,6 +83,26 @@
 	---help---
 	  This is the driver for the STe100p and STe101p PHYs.
 
+choice
+        depends on STE10XP
+        prompt "PHY devices"
+
+config STE100P
+        bool "STE100P"
+        help
+          Say Y here to select the STE100P PHY
+
+config STE101P
+        bool "STE101P"
+        help
+          Say Y here to select the STE101P PHY
+endchoice
+
+
+config RTL8201 
+	depends on PHYLIB
+        bool "Driver for Realtek RTL8201 PHY"
+
 config LSI_ET1011C_PHY
 	tristate "Driver for LSI ET1011C PHY"
 	---help---
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -21,3 +21,5 @@
 obj-$(CONFIG_NATIONAL_PHY)	+= national.o
 obj-$(CONFIG_STE10XP)		+= ste10Xp.o
 obj-$(CONFIG_MICREL_PHY)	+= micrel.o
+obj-$(CONFIG_RTL8201)		+= rtl8201.o
+
--- a/drivers/net/phy/rtl8201.c
+++ b/drivers/net/phy/rtl8201.c
@@ -0,0 +1,139 @@
+/* ============================================================================
+ * This is a driver for the RTL8201 PHY controller.
+ *  (based on STE10XP driver)
+ *
+ *	soon@dgstation.co.kr
+ *
+ * ----------------------------------------------------------------------------
+ * Changelog:
+ *	first release for cuberevo
+ *	second release for opticum/orton 9600 HD
+ *
+ * ===========================================================================*/
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/moduleparam.h>
+#include <linux/interrupt.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mii.h>
+#include <linux/phy.h>
+
+#undef PHYDEBUG
+#define DEFAULT_PHY_ID       0
+#define RESOURCE_NAME        "rtl8201"
+
+#define MII_XCIIS            0x11   /* Configuration Info IRQ & Status Reg*/
+#define MII_XIE              0x12   /* Interrupt Enable Register*/
+#define MII_XIE_DEFAULT_MASK 0x0070 /* ANE complete, Remote Fault, Link Down */
+
+/* RTL8201 phy identifier values */
+#define RTL8201_PHY_ID		 0x00008201  // 0x00061c51
+
+static int rtl8201_config_init(struct phy_device *phydev)
+{
+	int value, err;
+
+	printk("%s >\n", __func__);
+
+	/* Software Reset PHY */
+	value = phy_read(phydev, MII_BMCR);
+	if (value < 0)
+	{
+		return value;
+	}
+
+	value |= BMCR_RESET;
+	err = phy_write(phydev, MII_BMCR, value);
+	if (err < 0)
+	{
+		return err;
+	}
+
+	do
+	{
+		value = phy_read(phydev, MII_BMCR);
+	} while (value & BMCR_RESET);
+
+	return 0;
+}
+
+/* RTL8201 don't have interrupt */
+static int rtl8201_config_intr(struct phy_device *phydev)
+{
+	int err, value;
+
+	if (phydev->interrupts == PHY_INTERRUPT_ENABLED)
+	{
+		/* Enable all STe101P interrupts (PR12) */
+		err = phy_write(phydev, MII_XIE, MII_XIE_DEFAULT_MASK);
+		/* clear any pending interrupts */
+		if (err == 0)
+		{
+			value = phy_read(phydev, MII_XCIIS);
+			if (value < 0)
+			{
+				err = value;
+			}
+		}
+	}
+	else
+	{
+		err = phy_write(phydev, MII_XIE, 0);
+	}
+	return err;
+}
+
+static int rtl8201_ack_interrupt(struct phy_device *phydev)
+{
+	int err = phy_read(phydev, MII_XCIIS);
+
+	if (err < 0)
+	{
+		return err;
+	}
+
+	return 0;
+}
+
+static struct phy_driver rtl8201_pdriver =
+{
+	.phy_id         = RTL8201_PHY_ID,
+	.phy_id_mask    = 0xfffffffe,
+	.name           = "RTL8201",
+	.features       = PHY_BASIC_FEATURES,
+	.flags          = 0,  // PHY_HAS_INTERRUPT,
+	.config_init    = rtl8201_config_init,
+	.config_aneg    = genphy_config_aneg,
+	.read_status    = genphy_read_status,
+	.ack_interrupt  = rtl8201_ack_interrupt,
+	.config_intr    = rtl8201_config_intr,
+	.suspend        = genphy_suspend,
+	.resume         = genphy_resume,
+	.driver         =
+	{
+		.owner      = THIS_MODULE
+	}
+};
+
+static int __init rtl8201_init(void)
+{
+	int retval;
+
+	return phy_driver_register(&rtl8201_pdriver);
+}
+
+static void __exit rtl8201_exit(void)
+{
+	phy_driver_unregister(&rtl8201_pdriver);
+}
+
+module_init(rtl8201_init);
+module_exit(rtl8201_exit);
+
+MODULE_DESCRIPTION("RTL8201 PHY driver");
+MODULE_LICENSE("GPL");
+//vim:ts=4
