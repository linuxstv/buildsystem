--- a/arch/sh/kernel/setup.c.orig
+++ a/arch/sh/kernel/setup.c
@@ -419,6 +419,34 @@
 #endif
 #endif
 
+	{  // change command line supplied by boot loader to desired one; inserted suplied MAC
+		int command_line_len = strlen(command_line);
+		char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock0 rw rootfstype=jffs2";
+		char new_command_line[] = "console=ttyAS0,115200 ubi.mtd=3 root=ubi0:rootfs rootfstype=ubifs rw init=/bin/devinit mem=128m coprocessor_mem=4m@0x10000000,4m@0x10400000 nwhwconf=device:eth0,hwaddr:";
+		char mac[] = "12:34:56:78:9A:BC";
+		int org_command_line_len = strlen(org_command_line);
+		int i;
+
+		for (i = 0; i < (command_line_len - 7); i++)
+		{
+			if (!strncmp(command_line + i, "ethaddr", 7))
+			{
+				strlcpy(mac, command_line + i + 8, sizeof(mac));
+				break;
+			}
+			if (!strncmp(command_line + i, "hwaddr", 6))
+			{
+				strlcpy(mac, command_line + i + 7, sizeof(mac));
+				break;
+			}
+		}
+		if (command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+		{
+			strlcpy(command_line, new_command_line, sizeof(new_command_line));
+			strlcat(command_line, mac, sizeof(mac));
+		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
@@ -569,6 +597,7 @@
 	seq_printf(m, "processor\t: %d\n", cpu);
 	seq_printf(m, "cpu family\t: %s\n", init_utsname()->machine);
 	seq_printf(m, "cpu type\t: %s\n", get_cpu_subtype(c));
+	seq_printf(m, "cpu MHz\t\t: 266\n");
 	if (c->cut_major == -1)
 		seq_printf(m, "cut\t\t: unknown\n");
 	else if (c->cut_minor == -1)
--- a/arch/sh/boards/mach-mb442/mach.c.org
+++ b/arch/sh/boards/mach-mb442/mach.c
@@ -43,16 +43,16 @@
 	/* Set the ILC to route external interrupts to the the INTC */
 	/* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
 	/* Inputs sys-irq2 and 3 are unused (pulled high) */
-	ilc_route_external(ILC_EXT_IRQ0, 4, 0);		/* SMC Ethernet */
-	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* ATA */
-	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* Unused */
-	ilc_route_external(ILC_EXT_MDINT, 7, 0);	/* STe100 PHY */
+//	ilc_route_external(ILC_EXT_IRQ0, 4, 0);		/* SMC Ethernet */
+	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* SMC Ethernet nBox (was ATA)*/
+//	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* Unused */
+//	ilc_route_external(ILC_EXT_MDINT, 7, 0);	/* STe100 PHY */
 }
 
 void __init mb442_setup(char**);
 
 static struct sh_machine_vector mv_mb442 __initmv = {
-	.mv_name		= "STb7100 Reference board",
+	.mv_name		= "ADB ITI-5800S(X) board",
 	.mv_setup		= mb442_setup,
 	.mv_nr_irqs		= NR_IRQS,
 	.mv_init_irq		= mb442_init_irq,
--- a/arch/sh/boards/mach-mb442/setup.c.org
+++ b/arch/sh/boards/mach-mb442/setup.c
@@ -8,6 +8,9 @@
  * License.  See linux/COPYING for more information.
  *
  * STMicroelectronics STb7100 Reference board support.
+ *
+ * Modified to support ADB ITI-5800S(X)
+ *
  */
 
 #include <linux/init.h>
@@ -18,100 +21,203 @@
 #include <linux/delay.h>
 #include <linux/spi/spi.h>
 #include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/stm/nand.h>
+#include <linux/mtd/partitions.h> 
 #include <linux/mtd/physmap.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
-
-
-
-#define MB442_PIO_STE100P_RESET stm_gpio(2, 4)
-#define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
-#define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
-
-
+#include <linux/bpa2.h>
+#include <linux/stm/emi.h>
+#include <linux/stm/gpio.h> 
+
+/* additional info:
+ 
+ LMI_SYS:
+ 0x04000000-0x0BFFFFFF = 128 MB RAM for linux
+ 
+ LMI_VID:
+ 0x10000000-0x103FFFFF = 4MB RAM for ST231-0 (video delta)
+ 0x10400000-0x107FFFFF = 4MB RAM for ST231-1 (audio delta)
+ 0x10800000-0x13FFFFFF = 56MB RAM for allocator
+*/
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", "v4l2-coded-video-buffers", NULL };
+
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", NULL };
+
+/*
+ 0x10000000 - 0x103FFFFF - cocpu 1 ram ( 4mb)
+ 0x10400000 - 0x107FFFFF - cocpu 2 ram ( 4mb)
+ 0x10800000 - 0x13FFFFFF - lmi_vid     (56mb)
+ 0x14000000 - 0x15BFFFFF - lmi_sys     (28mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+      {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+            },
+            {
+                .name  = "LMI_SYS",
+                .start = 0,  // should be 0x8000000 ?
+                .size  = 0x01C00000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+            }
+        };
 
 void __init mb442_setup(char** cmdline_p)
 {
-	printk("STMicroelectronics STb7100 Reference board initialisation\n");
+	printk("ADB ITI-5800S(X) board initialisation\n");
 
 	stx7100_early_device_init();
 
-	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
-			.is_console = 1, });
-	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
-			.is_console = 0, });
+	stx7100_configure_asc(2, &(struct stx7100_asc_config)
+	{
+		.hw_flow_control = 0,
+		.is_console = 1,
+	});
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
-static struct resource mb442_smc91x_resources[] = {
-	[0] = {
-		.start	= 0x02000300,
-		.end	= 0x02000300 + 0xff,
+static struct resource iti_5800_smc91x_resources[] =
+{
+	[0] =
+	{
+		.start	= 0x00c00000,
+		.end	= 0x00c3ffff,
 		.flags	= IORESOURCE_MEM,
 	},
-	[1] = {
-		.start	= IRL0_IRQ,
-		.end	= IRL0_IRQ,
+	[1] =
+	{
+		.start	= IRL1_IRQ,
+		.end	= IRL1_IRQ,
 		.flags	= IORESOURCE_IRQ,
 	},
 };
 
-static struct platform_device mb442_smc91x_device = {
+static struct platform_device iti_5800_smc91x_device =
+{
 	.name		= "smc91x",
 	.id		= 0,
-	.num_resources	= ARRAY_SIZE(mb442_smc91x_resources),
-	.resource	= mb442_smc91x_resources,
-};
-
-static void mb442_set_vpp(struct map_info *info, int enable)
-{
-	gpio_set_value(MB442_PIO_FLASH_VPP, enable);
-}
-
-static struct platform_device mb442_physmap_flash = {
-	.name		= "physmap-flash",
-	.id		= -1,
+	.num_resources	= ARRAY_SIZE(iti_5800_smc91x_resources),
+	.resource	= iti_5800_smc91x_resources,
+};
+
+static struct resource iti_5800_nor_device_resource =
+{
+	.start		= 0x00000000,
+	.end		= 0x001FFFFF,  // device is 4M so end is really 0x003FFFFF, corrected due to shorted A20
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct mtd_partition iti_5800_nor_parts[] =
+{
+	{
+		.name = "uboot",                  // mtd0: U-boot from A0200000 to A022FFFF
+		.size = 0x00030000,               // 192 kbyte (note hole of 64 kbyte until environment)
+		.offset = 0x00000000,
+	},
+	{
+		.name = "uboot env",              // mtd1  // values for freebox/MAGUS loader
+		.size = 0x00010000,               //  64 kbyte
+		.offset = 0x00040000,             // 256 kbyte
+	},
+	{  // corrected because of A20 shorted to logic 1
+		.name = "nor_kernel",             // mtd2
+		.size   = 0x001b0000,             // 2 Mbyte - 320 kbyte = 1,6875 Mbyte
+		.offset = 0x00050000,             // 320 kbyte
+	},
+#if 0
+	{  // wasted because of A20 shorted to logic 1
+		.name = "nor_unusable",           // (mtd3)
+		.size   = MTDPART_SIZ_FULL,       // 2 Mbyte
+		.offset = 0x00200000,             // 2 Mbyte
+	}
+#endif
+};
+
+static struct physmap_flash_data iti_5800_nor_device_data =
+{
+	.width		= 2, 
+	.parts		= iti_5800_nor_parts, 
+	.nr_parts	= ARRAY_SIZE(iti_5800_nor_parts),
+	.parts		= iti_5800_nor_parts
+}; 
+
+static struct platform_device iti_5800_nor_device =
+{
+	.name = "physmap-flash",
+	.id   = -1,
+	.dev  =
+	{
+		.platform_data = &iti_5800_nor_device_data,
+	},
 	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
-	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.set_vpp	= mb442_set_vpp,
-	},
-};
-
-
-static int mb442_phy_reset(void* bus)
-{
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-
-	return 1;
-}
-
-#define STMMAC_PHY_ADDR 14
-static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
-	[STMMAC_PHY_ADDR] = IRL3_IRQ,
-};
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
-	.bus_id = 0,
-	.phy_reset = mb442_phy_reset,
-	.phy_mask = 1,
-	.irqs = stmmac_phy_irqs,
-};
-
-static struct platform_device *mb442_devices[] __initdata = {
-	&mb442_smc91x_device,
-	&mb442_physmap_flash,
-};
-
-static int __init mb442_device_init(void)
+	.resource = &iti_5800_nor_device_resource,
+};
+
+static struct mtd_partition iti_5800_nand_parts[] =
+{
+	{
+		.name	= "rootfs",            // mtd3  // values for freebox/MAGUS loader
+		.offset	= 0,
+		.size 	= 0x03c00000,          // 60 Mbyte
+	},
+	{
+		.name	= "kernel",            // mtd4:
+		.offset	= 0,
+		.offset	= MTDPART_OFS_APPEND,  // 60 Mbyte
+		.size	= MTDPART_SIZ_FULL,    // 4 Mbyte
+	},
+};
+
+struct stm_nand_bank_data iti_5800_nand_bank_data =
+{
+
+	.csn                  = 1,
+	.nr_partitions        = ARRAY_SIZE(iti_5800_nand_parts),
+	.partitions           = iti_5800_nand_parts,
+	.options              = NAND_NO_AUTOINCR,
+	.timing_data          = &(struct stm_nand_timing_data)
+	{
+		.sig_setup        = 40,  // times in ns
+		.sig_hold         = 40,
+		.CE_deassert      = 0,
+		.WE_to_RBn        = 100,
+		.wr_on            = 0,
+		.wr_off           = 10,
+		.rd_on            = 0,
+		.rd_off           = 10,
+		.chip_delay       = 25,  // in us
+	},
+	.emi_withinbankoffset = 0,
+};
+
+static struct platform_device iti_5800_nand_device =
+{
+	.name                 = "stm-nand-emi",
+	.dev.platform_data    = &(struct stm_plat_nand_emi_data)
+	{
+		.nr_banks         = 1,
+		.banks            = &iti_5800_nand_bank_data,
+		.emi_rbn_gpio     = stm_gpio(4, 5),
+		.emi_nce_gpio     = stm_gpio(3, 6) 
+	},
+};
+
+static struct platform_device *iti_5800_devices[] __initdata =
+{
+	&iti_5800_smc91x_device,
+	&iti_5800_nor_device,
+	&iti_5800_nand_device,
+};
+
+static int __init iti_5800_device_init(void)
 {
 	stx7100_configure_sata();
 
@@ -120,8 +226,7 @@
 			.out1_enabled = 1, });
 
 	stx7100_configure_ssc_i2c(0);
-	stx7100_configure_ssc_spi(1, NULL);
-	stx7100_configure_ssc_i2c(2);
+	stx7100_configure_ssc_i2c(1);
 
 	stx7100_configure_usb();
 
@@ -130,34 +235,8 @@
 			.tx_enabled = 0,
 			.tx_od_enabled = 0, });
 
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
-	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
-
-	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
-	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
-
-	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
-			.mode = stx7100_ethernet_mode_mii,
-			.ext_clk = 0,
-			.phy_bus = 0,
-			.phy_addr = STMMAC_PHY_ADDR,
-			.mdio_bus_data = &stmmac_mdio_bus,
-		});
-
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
-
-	return platform_add_devices(mb442_devices,
-			ARRAY_SIZE(mb442_devices));
+
+	return platform_add_devices(iti_5800_devices, ARRAY_SIZE(iti_5800_devices));
 }
-device_initcall(mb442_device_init);
+device_initcall(iti_5800_device_init);
+// vim:ts=4
--- a/drivers/ata/sata_stm.c.org
+++ b/drivers/ata/sata_stm.c
@@ -872,6 +872,8 @@
 		ata_port_printk(ap, KERN_ERR, "DMA error asserted\n");
 	}
 
+	else handled = 0;
+
 	return handled;
 
 }
@@ -951,20 +953,20 @@
 	struct ata_host *host = dev_instance;
 	unsigned int handled = 0;
 	unsigned int i;
-	struct stm_host_priv *hpriv = host->private_data;
 
 DPRINTK("ENTER\n");
 
 	spin_lock(&host->lock);
 
-	for (i = 0; i < host->n_ports; i++) {
-		if (hpriv->shared_dma_host_irq)
-			handled += stm_sata_dma_irq(host->ports[i]);
-		handled += stm_sata_host_irq(host->ports[i]);
+	for (i = 0; i < host->n_ports; i++)
+	{
+		handled += stm_sata_dma_irq(host->ports[i]);
+		if (!(handled)) handled += stm_sata_host_irq(host->ports[i]);
+		else handled = 0;
 	}
 
 	spin_unlock(&host->lock);
-
+	
 	return IRQ_RETVAL(handled);
 }
 
@@ -1230,6 +1232,9 @@
 		sata_private_info->device_config);
 	if (!hpriv->device_state)
 		return -EBUSY;
+
+	if (!hpriv->device_state)
+		return -EBUSY; 
 
 	mem_res = platform_get_resource(pdev,IORESOURCE_MEM,0);
 	phys_base = mem_res->start;
--- a/drivers/char/lirc/lirc_stm.c.org
+++ b/drivers/char/lirc/lirc_stm.c
@@ -877,7 +877,7 @@
 	rx.error = 0;
 	rx.off_rbuf = 0;
 	rx.sumUs = 0;
-	memset(rx.rbuf, 0, LIRC_STM_BUFSIZE);
+	memset(rx.rbuf, 0, (LIRC_STM_BUFSIZE * 4));  // freebox
 }
 
 static void lirc_stm_rx_interrupt(int irq, void *dev_id)
@@ -1371,7 +1371,7 @@
 	 */
 
 	if ((rx.rbuf = (lirc_t *) devm_kzalloc(dev,
-					       LIRC_STM_BUFSIZE,
+					       (LIRC_STM_BUFSIZE * 4),  // freebox
 					       GFP_KERNEL)) == NULL)
 		return -ENOMEM;
 
--- a/drivers/media/dvb/dvb-core/dvb_frontend.c.org
+++ b/drivers/media/dvb/dvb-core/dvb_frontend.c
@@ -1254,6 +1254,8 @@
 	/* Fake out a generic DVB-T request so we pass validation in the ioctl */
 	if ((c->delivery_system == SYS_ISDBT) ||
 	    (c->delivery_system == SYS_DVBT2)) {
+		p->frequency = c->frequency;
+		p->inversion = c->inversion;
 		p->u.ofdm.constellation = QAM_AUTO;
 		p->u.ofdm.code_rate_HP = FEC_AUTO;
 		p->u.ofdm.code_rate_LP = FEC_AUTO;
--- a/drivers/mtd/nand/Kconfig.org
+++ b/drivers/mtd/nand/Kconfig
@@ -487,4 +487,5 @@
	depends on MTD_NAND
+	depends on (CPU_SUBTYPE_STX7100)
	help
	  Enables the STMicroelectronics NAND driver for platforms in which the
	  device is connected via an EMI bank.
--- a/drivers/mtd/nand/stm_nand_emi.c.org
+++ b/drivers/mtd/nand/stm_nand_emi.c
@@ -44,6 +44,11 @@
 
 #define NAME	"stm-nand-emi"
 
+#define NAND_ALE_CTRL 1 << 16  // adb_box: ALE is connected to A16
+#define NAND_CLE_CTRL 1 << 17  // adb_box: CLE is connected to A17
+#define NAND_NW_CTRL  1 << 22  // adb_box: nW is connected to A22 (active low!)
+#define NAND_NR_CTRL  1 << 23  // adb_box: nR is connected to A23 (active low!)
+
 /*
  * Private data for stm_emi_nand driver.  Concurrency and device locking
  * handled by MTD layers.
@@ -56,18 +61,19 @@
 	unsigned int		emi_base;
 	unsigned int		emi_size;
 
-	int			rbn_gpio;	/* Ready not busy pin         */
-
-	void __iomem		*io_base;	/* EMI base for NAND chip     */
-	void __iomem		*io_data;	/* Address for data IO        */
-						/*        (possibly cached)   */
-	void __iomem		*io_cmd;	/* CMD output (emi_addr(17))  */
-	void __iomem		*io_addr;	/* ADDR output (emi_addr(17)) */
-
-	spinlock_t		lock; /* save/restore IRQ flags */
+	int			nce_gpio;  /* NAND CE control pin        */
+	int			rbn_gpio;  /* Ready not busy pin         */
+
+	void __iomem		*io_base;  /* EMI base for NAND chip     */
+	void __iomem		*io_data;  /* Address for data IO        */
+	                                   /*        (possibly cached)   */
+	void __iomem		*io_cmd;   /* CMD output (emi_addr(17))  */
+	void __iomem		*io_addr;  /* ADDR output (emi_addr(16)) */
+
+	spinlock_t		lock;      /* save/restore IRQ flags     */
 
 #ifdef CONFIG_MTD_PARTITIONS
-	int			nr_parts;	/* Partition Table	      */
+	int			nr_parts;  /* Partition Table	         */
 	struct mtd_partition	*parts;
 #endif
 
@@ -84,6 +90,7 @@
  * share some hardware (normally a single Ready/notBusy signal).
  */
 struct stm_nand_emi_group {
+	int nce_gpio;
 	int rbn_gpio;
 	int nr_banks;
 	struct stm_nand_emi *banks[0];
@@ -376,13 +383,41 @@
 #endif /* CONFIG_STM_NAND_EMI_FDMA */
 
 #if defined(CONFIG_STM_NAND_EMI_LONGSL)
-static void nand_readsl_buf(struct mtd_info *mtd, uint8_t *buf, int len)
+static void nand_read_buf(struct mtd_info *mtd, uint8_t *buf, int len)
 {
 	int i;
 	struct nand_chip *chip = mtd->priv;
 
+//	printk(KERN_INFO "%s > (len = 0x%02x)\n", __func__, len);
+
+	for (i = 0; i < len; i++)
+	{
+		buf[i] = readb(chip->IO_ADDR_R);
+	}
+}
+
+#if 0  // routine is not replaceable without patch
+static int nand_read_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
+			      uint8_t *buf, int page)
+{
+//	printk(KERN_INFO "%s > (page = 0x%04x)\n", __func__, page);
+
+	chip->read_buf(mtd, buf, mtd->writesize);
+//	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
+	chip->ecc.read_oob(mtd, chip, page, 1);
+	return 0;
+}
+#endif
+
+static void nand_readsl_buf(struct mtd_info *mtd, uint8_t *buf, int len)
+{
+	int i;
+	struct nand_chip *chip = mtd->priv;
+
+//	printk(KERN_INFO "%s > (len = 0x%02x)\n", __func__, len);
 	/* read buf up to 4-byte boundary */
-	while ((unsigned int)buf & 0x3) {
+	while ((unsigned int)buf & 0x3)
+	{
 		*buf++ = readb(chip->IO_ADDR_R);
 		len--;
 	}
@@ -391,7 +426,9 @@
 
 	/* mop up trailing bytes */
 	for (i = (len & ~0x3); i < len; i++)
+	{
 		buf[i] = readb(chip->IO_ADDR_R);
+	}
 }
 #endif /* CONFIG_STM_NAND_EMI_LONGSL */
 
@@ -401,8 +438,10 @@
 	int i;
 	struct nand_chip *chip = mtd->priv;
 
+//	printk(KERN_INFO "%s > (len = 0x%02x)\n", __func__, len);
 	/* write buf up to 4-byte boundary */
-	while ((unsigned int)buf & 0x3) {
+	while ((unsigned int)buf & 0x3)
+	{
 		writeb(*buf++, chip->IO_ADDR_W);
 		len--;
 	}
@@ -411,7 +450,9 @@
 
 	/* mop up trailing bytes */
 	for (i = (len & ~0x3); i < len; i++)
+	{
 		writeb(buf[i], chip->IO_ADDR_W);
+	}
 }
 #endif
 
@@ -459,21 +500,41 @@
 	struct nand_chip *this = mtd->priv;
 	struct stm_nand_emi *data = this->priv;
 
-	if (ctrl & NAND_CTRL_CHANGE) {
-		if (ctrl & NAND_CLE) {
-			this->IO_ADDR_W = data->io_cmd;
-		} else if (ctrl & NAND_ALE) {
-			this->IO_ADDR_W = data->io_addr;
-		} else {
-			this->IO_ADDR_W = data->io_base;
-		}
-	}
-
+	if (ctrl & NAND_CTRL_CHANGE)
+	{
+		if (ctrl & NAND_CLE)
+		{
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(NAND_CLE_CTRL));
+		}
+		else
+		{
+			this->IO_ADDR_W = (void *)((unsigned int)data->io_cmd & ~(unsigned int)(NAND_CLE_CTRL));
+		}
+
+		if (ctrl & NAND_ALE)
+		{
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(NAND_ALE_CTRL));
+		}
+		else
+		{
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W & ~(unsigned int)(NAND_ALE_CTRL));
+		}
+		if (ctrl & NAND_NCE)
+		{
+			gpio_set_value(data->nce_gpio, 0);  // apply nCE
+		}
+		else
+		{
+			gpio_set_value(data->nce_gpio, 1);  // remove nCE
+		}	
+	}
 	if (cmd != NAND_CMD_NONE)
+	{
 		writeb(cmd, this->IO_ADDR_W);
-}
-
-/* Device ready functio, for boards where nand_rbn is available via GPIO pin */
+	}
+}
+
+/* Device ready function, for boards where nand_rbn is available via GPIO pin */
 static int nand_device_ready(struct mtd_info *mtd)
 {
 	struct nand_chip *this = mtd->priv;
@@ -562,7 +623,7 @@
  * Probe for the NAND device.
  */
 static struct stm_nand_emi * __init nand_probe_bank(
-	struct stm_nand_bank_data *bank, int rbn_gpio,
+	struct stm_nand_bank_data *bank, int rbn_gpio, int nce_gpio,
 	const char* name)
 {
 	struct stm_nand_emi *data;
@@ -620,19 +681,20 @@
 #else
 	data->io_data = data->io_base;
 #endif
-	/* Map cmd and addr addresses (emi_addr_17 and emi_addr_18) */
-	data->io_cmd = ioremap_nocache(data->emi_base | (1 << 17), 1);
+	/* Map cmd address (emi_addr_17) */
+	data->io_cmd = ioremap_nocache((data->emi_base & ~(NAND_NW_CTRL) | NAND_NR_CTRL) | (NAND_CLE_CTRL), 1);  // nW=0, nR=1
 	if (!data->io_cmd) {
 		printk(KERN_ERR NAME ": ioremap failed for io_cmd 0x%08x\n",
-		       data->emi_base | (1 << 17));
+		       data->emi_base | (NAND_CLE_CTRL));
 		res = -ENOMEM;
 		goto out4;
 	}
 
-	data->io_addr = ioremap_nocache(data->emi_base | (1 << 18), 1);
+	/* Map addr address (emi_addr_16) */
+	data->io_addr = ioremap_nocache((data->emi_base & ~(NAND_NW_CTRL) | NAND_NR_CTRL) | (NAND_ALE_CTRL), 1);  // nW=0, nR=1
 	if (!data->io_addr) {
 		printk(KERN_ERR NAME ": ioremap failed for io_addr 0x%08x\n",
-		       data->emi_base | (1 << 18));
+		       data->emi_base | (NAND_ALE_CTRL));
 		res = -ENOMEM;
 		goto out5;
 	}
@@ -646,10 +708,17 @@
 
 	tm = bank->timing_data;
 
-	data->chip.IO_ADDR_R = data->io_base;
-	data->chip.IO_ADDR_W = data->io_base;
+	data->chip.IO_ADDR_R = (void *)((unsigned int)data->io_base & ~((unsigned int)NAND_NR_CTRL) | ((unsigned int)NAND_NW_CTRL)); // nW=1, nR=0
+	data->chip.IO_ADDR_W = (void *)((unsigned int)data->io_base & ~((unsigned int)NAND_NW_CTRL) | ((unsigned int)NAND_NR_CTRL)); // nW=0, nR=1
+	data->nce_gpio = -1;
+ 	data->rbn_gpio = -1;
 	data->chip.chip_delay = tm->chip_delay;
 	data->chip.cmd_ctrl = nand_cmd_ctrl_emi;
+
+	/* Do we have access to NAND_CE? */
+	if (gpio_is_valid(nce_gpio)) {
+		data->nce_gpio = nce_gpio;
+	}
 
 	/* Do we have access to NAND_RBn? */
 	if (gpio_is_valid(rbn_gpio)) {
@@ -671,7 +740,8 @@
 	data->nand_phys_addr = data->emi_base;
 
 #elif defined(CONFIG_STM_NAND_EMI_LONGSL)
-	data->chip.read_buf = nand_readsl_buf;
+//	data->chip.read_buf = nand_readsl_buf;  // does not work with freebox loader
+	data->chip.read_buf = nand_read_buf;  // relocate routine address
 	data->chip.write_buf = nand_writesl_buf;
 
 #elif defined(CONFIG_STM_NAND_EMI_CACHED)
@@ -685,6 +755,11 @@
 #endif
 
 	data->chip.ecc.mode = NAND_ECC_SOFT;
+
+//	if (data->chip.ecc.mode == NAND_ECC_SOFT)
+//	{
+//		data->chip.ecc.read_page_raw = nand_read_page_raw;
+//	}
 
 	/* Copy chip options from platform data */
 	data->chip.options = bank->options;
@@ -737,6 +812,7 @@
 	struct stm_plat_nand_emi_data *pdata = pdev->dev.platform_data;
 	int res;
 	int n;
+	int nce_gpio;
 	int rbn_gpio;
 	struct stm_nand_emi_group *group;
 	struct stm_nand_bank_data *bank;
@@ -746,6 +822,17 @@
 			GFP_KERNEL);
 	if (!group)
 		return -ENOMEM;
+
+	nce_gpio = pdata->emi_nce_gpio;
+	if (gpio_is_valid(nce_gpio)) {
+		res = gpio_request(nce_gpio, "nand_CE");
+		if (res == 0) {
+			gpio_direction_output(nce_gpio, 0);
+		} else {
+			dev_err(&pdev->dev, "nand_ce pin unavailable.\n");
+			nce_gpio = -1;
+		}
+	}
 
 	rbn_gpio = pdata->emi_rbn_gpio;
 	if (gpio_is_valid(rbn_gpio)) {
@@ -764,7 +851,7 @@
 
 	bank = pdata->banks;
 	for (n=0; n<pdata->nr_banks; n++) {
-		group->banks[n] = nand_probe_bank(bank, rbn_gpio,
+		group->banks[n] = nand_probe_bank(bank, rbn_gpio, nce_gpio,
 						  dev_name(&pdev->dev));
 		bank++;
 	}
@@ -807,6 +894,9 @@
 #endif
 		kfree(data);
 	}
+
+	if (gpio_is_valid(group->nce_gpio))
+		gpio_free(group->nce_gpio);
 
 	if (gpio_is_valid(group->rbn_gpio))
 		gpio_free(group->rbn_gpio);
--- a/drivers/net/smc91x.c.org
+++ b/drivers/net/smc91x.c
@@ -234,7 +234,6 @@
 	}								\
 } while (0)
 
-
 /*
  * this does a soft reset on the device
  */
@@ -269,6 +268,10 @@
 	SMC_SELECT_BANK(lp, 0);
 	SMC_SET_RCR(lp, RCR_SOFTRST);
 
+    	msleep(100); // d-mon
+    	SMC_SET_RCR(lp, RCR_CLEAR);
+    	msleep(60);
+
 	/*
 	 * Setup the Configuration Register
 	 * This is necessary because the CONFIG_REG is not affected
@@ -309,6 +312,8 @@
 	SMC_SET_RCR(lp, RCR_CLEAR);
 	SMC_SET_TCR(lp, TCR_CLEAR);
 
+    	udelay(5); // d-mon
+
 	SMC_SELECT_BANK(lp, 1);
 	ctl = SMC_GET_CTL(lp) | CTL_LE_ENABLE;
 
@@ -325,6 +330,8 @@
 
 	/* Reset the MMU */
 	SMC_SELECT_BANK(lp, 2);
+	udelay(5); // d-mon
+
 	SMC_SET_MMU_CMD(lp, MC_RESET);
 	SMC_WAIT_MMU_BUSY(lp);
 }
@@ -349,7 +356,9 @@
 	SMC_SET_MAC_ADDR(lp, dev->dev_addr);
 
 	/* now, enable interrupts */
-	mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	//mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	mask = IM_ERCV_INT|IM_ALLOC_INT|IM_RCV_INT | IM_MDINT; // d-mon
+
 	if (lp->version >= (CHIP_91100 << 4))
 		mask |= IM_MDINT;
 	SMC_SELECT_BANK(lp, 2);
@@ -1117,10 +1126,14 @@
 	 * Enable PHY Interrupts (for register 18)
 	 * Interrupts listed here are disabled
 	 */
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+
 	smc_phy_write(dev, phyaddr, PHY_MASK_REG,
 		PHY_INT_LOSSSYNC | PHY_INT_CWRD | PHY_INT_SSD |
 		PHY_INT_ESD | PHY_INT_RPOL | PHY_INT_JAB |
 		PHY_INT_SPDDET | PHY_INT_DPLXDET);
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
 
 	/* Configure the Receive/Phy Control register */
 	SMC_SELECT_BANK(lp, 0);
@@ -2354,7 +2367,11 @@
 		ret = -ENOMEM;
 		goto out_release_attrib;
 	}
-
+	
+	
+	platform_set_drvdata(pdev, ndev);
+	//ret = smc_probe(ndev, addr);
+	
 #ifdef CONFIG_ARCH_PXA
 	{
 		struct smc_local *lp = netdev_priv(ndev);
--- a/drivers/net/smc91x.h.org
+++ b/drivers/net/smc91x.h
@@ -250,16 +250,19 @@
  * to do a SMC_outl, which on a 16 bit bus translates into two 16 bit writes.
  * This bypasses the special logic which would prevent this also updating
  * this interrupt mask register. */
-#define SMC_CAN_USE_8BIT	1
+#define SMC_CAN_USE_8BIT	0
 #define SMC_CAN_USE_16BIT	1
 #define SMC_CAN_USE_32BIT	0
 #define SMC_CAN_USE_32BIT_DATA	1
-#define SMC_IO_SHIFT		0
+#define SMC_IO_SHIFT		14
+    
+    #undef  SMC_USE_PXA_DMA
+     
 #else
 #error Unknown board
 #endif
 
-#define SMC_NOWAIT		0
+#define SMC_NOWAIT		1
 #define SMC_IRQ_FLAGS		0
 
 #ifdef SMC_STEM_BS_MASK
--- a/drivers/stm/stx7100_comms.c.org
+++ b/drivers/stm/stx7100_comms.c
@@ -226,12 +226,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(2, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(2, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC0_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 1, 1, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+		//	/* DVO_OUT_ON = 0 (SSC not DVO) */
+		//	STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[1] = {
@@ -344,7 +344,7 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
--- a/include/linux/libata.h.org
+++ b/include/linux/libata.h
@@ -52,6 +52,7 @@
  * compile-time options: to be removed as soon as all the drivers are
  * converted to the new debugging mechanism
  */
+//#define ATA_DEBUG
 #undef ATA_DEBUG		/* debugging output */
 #undef ATA_VERBOSE_DEBUG	/* yet more debugging output */
 #undef ATA_IRQ_TRAP		/* define to ack screaming irqs */
@@ -938,6 +939,18 @@
 #undef writew
 #define writew(v_,a_)	sata_writew(ap, v_, a_)
 
+/* overwrite the original definition from io.h */
+#undef __raw_readb
+#define __raw_readb(a_)     readb(a_)
+#undef __raw_writeb
+#define __raw_writeb(v_,a_) writeb(v_,a_)
+#undef __raw_readw
+#define __raw_readw(a_)     readw(a_)
+#undef __raw_writew
+#define __raw_writew(v_,a_) writew(v_,a_)
+
+
+
 struct ata_port_info {
 	unsigned long		flags;
 	unsigned long		link_flags;
--- a/drivers/stm/stx7100_hispeed.c.org
+++ b/drivers/stm/stx7100_hispeed.c
@@ -192,6 +192,12 @@
 	 */
 	stx7100_usb_pwr_gpio = stm_pad_gpio_request_output(state, "PWR", 1);
 	BUG_ON(stx7100_usb_pwr_gpio == STM_GPIO_INVALID);
+
+       // reset usb on boot - some DVB-T dongles (as102) need it to work properly.
+       gpio_set_value(stx7100_usb_pwr_gpio, 0);
+       mdelay(2000);
+       gpio_set_value(stx7100_usb_pwr_gpio, 1);
+       mdelay(600);
 
 	return 0;
 }
--- a/include/linux/stm/platform.h.org
+++ b/include/linux/stm/platform.h
@@ -284,6 +284,7 @@
 	unsigned int nr_banks;
 	struct stm_nand_bank_data *banks;
 	int emi_rbn_gpio;
+	int emi_nce_gpio;
 };
 
 struct stm_nand_config {
@@ -298,6 +299,9 @@
 		int emi_gpio;
 		int flex_connected;
 	} rbn;
+	union {
+		int emi_gpio;
+	} nce;
 };
 
 
--- a/drivers/mtd/nand/nand_base.c.org
+++ b/drivers/mtd/nand/nand_base.c
@@ -943,6 +943,8 @@
 	return status;
 }
 
+static int nand_read_oob_std(struct mtd_info *mtd, struct nand_chip *chip, int page, int sndcmd);
+
 /**
  * nand_read_page_raw - [Intern] read raw page data without ecc
  * @mtd:	mtd info structure
@@ -956,7 +958,8 @@
 			      uint8_t *buf, int page)
 {
 	chip->read_buf(mtd, buf, mtd->writesize);
-	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
+//	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
+	nand_read_oob_std(mtd, chip, page, 1);  // read oob into chip->poi
 	return 0;
 }
 

