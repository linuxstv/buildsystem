--- a/arch/sh/kernel/setup.c.org
+++ b/arch/sh/kernel/setup.c
@@ -389,6 +389,89 @@
 #endif
 #endif
 
+	{
+		int i, j;
+		int cmd_line_len = strlen(command_line);
+		int pos = cmd_line_len;
+		unsigned char org_cmd_line[] = "console=ttyAS1,115200 root=/dev/mtdblock6 rootfstype=jffs2";
+		unsigned char org_cmd_line2[] = "console=ttyAS0,115200 root=/dev/mtdblock6 rootfstype=jffs2";
+		unsigned char new_cmd_line[] = "console=ttyAS0,115200 root=/dev/mtdblock6 rootfstype=jffs2 rw init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 stmmaceth=msglvl:0,phyaddr:1,watchdog:5000 nwhwconf=device:eth0,hwaddr:";
+		unsigned char final_cmd_line[512] = { '\0' };
+		unsigned char mac[] = "12:34:56:78:9A:BC";
+		unsigned char stb_id_name[] = " STB_ID=";
+		unsigned char stb_id[] = "12:34:56:78:9A:BC:EF";
+		int org_cmd_line_len = strlen(org_cmd_line);
+
+		/* spider: remove bigphysarea allocation from command line */
+		for (i = 0; i < (cmd_line_len - 11); i++)
+		{
+			if (!strncmp(command_line + i + 1, "bigphysarea", 11))
+			{
+				// search for next pos
+				for (j = i + 1; j < cmd_line_len; j++)
+				{
+					if (command_line[j] == ' ')
+					{
+						pos = j;
+						break;
+					}
+				}
+				memmove(command_line + i, command_line + pos, cmd_line_len - pos);
+				memset(&command_line[cmd_line_len - (pos - i)], '\0', pos - i);
+				break;
+			}
+		}
+		// look for MAC (detect either 'ethaddr' or 'hwaddr')
+		cmd_line_len = strlen(command_line);  // get new length
+		for (i = 0; i < (cmd_line_len - 7); i++)
+		{
+			if (!strncmp(command_line + i, "ethaddr", 7))
+			{
+				strlcpy(mac, command_line + i + 8, sizeof(mac));
+				break;
+			}
+			if (!strncmp(command_line + i, "hwaddr", 6))
+			{
+				strlcpy(mac, command_line + i + 7, sizeof(mac));
+				break;
+			}
+		}
+		// append MAC
+		strlcpy(final_cmd_line, new_cmd_line, sizeof(new_cmd_line));
+		strlcat(final_cmd_line, mac, sizeof(mac));
+
+		// look for STB_ID=
+		for (i = 0; i < (cmd_line_len - 7); i++)
+		{
+			if (!strncmp(command_line + i, "STB_ID=", 6))
+			{
+				strlcpy(stb_id, command_line + i + 7, sizeof(stb_id));
+				printk("STB_ID: found: [%s] (length = %d\n", stb_id, strlen(stb_id));
+				break;
+			}
+		}
+		// append STB_ID
+		strlcat(final_cmd_line, stb_id_name, sizeof(stb_id_name));
+		strlcat(final_cmd_line, stb_id, sizeof(stb_id));
+//		printk("\nLength: %d (%d), Final cmd_line[%s]\n\n", sizeof(new_cmd_line) + sizeof(mac) + sizeof(stb_id_name) + sizeof(stb_id) - 4, strlen(final_cmd_line), final_cmd_line);
+		/* Overwrite the original command line under the following conditions:
+		 *
+		 * 1. The test string with console=ttyAS1,115200 is shorter than the
+		 *    original commandline;
+		 * 2. The original command line starts with either the test string
+		 *    with console=ttyAS1,115200 or the test string with
+		 *    console=ttyAS0,115200.
+		 * The net result of all this is that the STB_ID and MAC are retained,
+		 * the console tty is always ttyAS1.
+		 */
+		if (cmd_line_len >= org_cmd_line_len
+		&& ((!strncmp(command_line, org_cmd_line, org_cmd_line_len))
+		 || (!strncmp(command_line, org_cmd_line2, org_cmd_line_len))))
+		{
+			strlcpy(command_line, final_cmd_line, strlen(final_cmd_line) + 1);
+		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
@@ -555,6 +648,7 @@
 	seq_printf(m, "cpu family\t: %s\n", init_utsname()->machine);
 	seq_printf(m, "cpu variant\t: %s\n", get_cpu_variant(c));
 	seq_printf(m, "cpu type\t: %s\n", get_cpu_subtype(c));
+	seq_printf(m, "cpu MHz\t\t: 540\n");
 	if (c->cut_major == -1)
 		seq_printf(m, "cut\t\t: unknown\n");
 	else if (c->cut_minor == -1)
--- a/arch/sh/boards/mach-sat7111/setup.c.org
+++ b/arch/sh/boards/mach-sat7111/setup.c
@@ -1,13 +1,15 @@
 /*
  * arch/sh/boards/mach-sat7111/setup.c
  *
+ * Version for Fulan spark (STB_ID 09 00 ...)
+ *
+ * Original code:
  * Copyright (C) 2011 STMicroelectronics Limited
  * Author: Jon Frosdick (jon.frosdick@st.com)
  *
  * May be copied or modified under the terms of the GNU General Public
  * License.  See linux/COPYING for more information.
  *
- * STMicroelectronics sat7111 board support.
  */
 
 #include <linux/init.h>
@@ -26,6 +28,7 @@
 #include <linux/stm/emi.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
+#include <linux/stm/nand_devices.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
 #include <linux/spi/spi.h>
@@ -33,163 +36,132 @@
 #include <asm/irq-ilc.h>
 #include <asm/irl.h>
 #include <sound/stm.h>
-
-#define SAT7111_PHY_RESET stm_gpio(2, 4)
-
-/* The sat7111 board is populated with NOR, NAND, and Serial Flash.  The setup
- * below assumes the board is in its default boot-from-NOR configuration.  Other
- * boot configurations are possible but require board-level modifications to be
- * made, and equivalent changes to the setup here.  Note, only boot-from-NOR has
- * been fully tested.
- */
-
-static void __init sat7111_setup(char** cmdline_p)
-{
-	printk(KERN_INFO "STMicroelectronics sat7111 reference board initialisation\n");
+#include <linux/bpa2.h>
+
+#define SAT7111_PHY_RESET stm_gpio(5, 3)
+
+const char *LMI_IO_partalias[] = { "audio", "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers",
+								   "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4Mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4Mb)
+0x40800000 - 0x498FFFFF - linux   (145Mb)
+0x49900000 - 0x4B1FFFFF - bigphys ( 25Mb)
+0x4B200000 - 0x4FFFFFFF - lmi_io  ( 78Mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] =
+{
+	{
+		.name  = "bigphysarea",
+		.start = 0x49900000,
+		.size  = 0x01900000,  // 25 Mbyte
+		.flags = 0,
+		.aka   = NULL
+	},
+	{
+		.name  = "LMI_IO",
+		.start = 0x4B200000,
+		.size  = 0x04E00000,  // 78 Mbyte
+		.flags = 0,
+		.aka   = LMI_IO_partalias
+	},
+};
+
+static void __init spark_setup(char** cmdline_p)
+{
+	printk(KERN_INFO "Fulan spark board initialisation\n");
 
 	stx7111_early_device_init();
 
-	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
+	stx7111_configure_asc(2, &(struct stx7111_asc_config)
+	{
 			.hw_flow_control = 1,
-			.is_console = 1, });
-	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
-			.is_console = 0, });
+			.is_console = 1,
+	});
+  	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
-
-
-static struct platform_device sat7111_leds = {
-	.name = "leds-gpio",
-	.id = -1,
-	.dev.platform_data = &(struct gpio_led_platform_data) {
-		.num_leds = 2,
-		.leds = (struct gpio_led[]) {
-			{
-				.name = "HB red",
-				.default_trigger = "heartbeat",
-				.gpio = stm_gpio(3, 5),
-			}, {
-				.name = "HB white",
-				.gpio = stm_gpio(3, 0),
+// NOR flash
+static struct platform_device sat7111_nor_flash =
+{
+	.name          = "physmap-flash",
+	.id            = -1,
+	.num_resources = 1,
+	.resource      = (struct resource[])
+	{
+		STM_PLAT_RESOURCE_MEM(0, 8 * 1024 * 1024),
+	},
+	.dev.platform_data = &(struct physmap_flash_data)
+	{
+		.width    = 2,
+		.nr_parts = 3,
+		.parts    = (struct mtd_partition [])
+		{
+			{
+				.name   = "u-boot",         // mtd0
+				.size   = 0x00080000,       // 512 kbyte
+				.offset = 0x00000000,
 			},
-		},
-	},
-};
-
-
-
-static struct gpio_keys_button sat7111_buttons[] = {
-	{
-		.code = BTN_0,
-		.gpio = stm_gpio(6, 2),
-		.desc = "SW2",
-	}, {
-		.code = BTN_1,
-		.gpio = stm_gpio(6, 3),
-		.desc = "SW3",
-	}, {
-		.code = BTN_2,
-		.gpio = stm_gpio(6, 4),
-		.desc = "SW4",
-	}, {
-		.code = BTN_3,
-		.gpio = stm_gpio(6, 5),
-		.desc = "SW5",
-	},
-};
-
-static struct platform_device sat7111_button_device = {
-	.name = "gpio-keys",
-	.id = -1,
-	.num_resources = 0,
-	.dev.platform_data = &(struct gpio_keys_platform_data) {
-		.buttons = sat7111_buttons,
-		.nbuttons = ARRAY_SIZE(sat7111_buttons),
-	},
-};
-
-static struct platform_device sat7111_nor_flash = {
-	.name		= "physmap-flash",
-	.id		= -1,
-	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
-	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.nr_parts	= 3,
-		.parts		=  (struct mtd_partition []) {
-			{
-				.name = "NOR Flash 1",
-				.size = 0x00080000,
-				.offset = 0x00000000,
-			}, {
-				.name = "NOR Flash 2",
-				.size = 0x00200000,
-				.offset = MTDPART_OFS_NXTBLK,
-			}, {
-				.name = "NOR Flash 3",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
+			{
+				.name   = "Kernel",         // mtd1
+				.size   = 0x00700000,       // 7 Mbyte
+				.offset = 0x00080000,
 			},
-		},
-
-
-	},
-};
-
-struct stm_nand_bank_data sat7111_nand_flash = {
-	.csn		= 1,
-	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
-	.nr_partitions	= 2,
-	.partitions	= (struct mtd_partition []) {
-		{
-			.name	= "NAND Flash 1",
-			.offset	= 0,
-			.size 	= 0x00800000
-		}, {
-			.name	= "NAND Flash 2",
-			.offset = MTDPART_OFS_NXTBLK,
-			.size	= MTDPART_SIZ_FULL
-		},
-	},
-	.timing_data	= &(struct stm_nand_timing_data) {
-		.sig_setup	= 50,		/* times in ns */
-		.sig_hold	= 50,
-		.CE_deassert	= 0,
-		.WE_to_RBn	= 100,
-		.wr_on		= 10,
-		.wr_off		= 40,
-		.rd_on		= 10,
-		.rd_off		= 40,
-		.chip_delay	= 30,		/* in us */
-	},
-};
-
-/* Serial Flash */
-static struct spi_board_info sat7111_serial_flash = {
-	.modalias       = "m25p80",
-	.bus_num        = 0,
-	.chip_select    = stm_gpio(6, 7),
-	.max_speed_hz   = 7000000,
-	.mode           = SPI_MODE_3,
-	.platform_data  = &(struct flash_platform_data) {
-		.name = "m25p80",
-		.type = "m25p16",
-		.nr_parts	= 2,
-		.parts = (struct mtd_partition []) {
-			{
-				.name = "Serial Flash 1",
-				.size = 0x00080000,
-				.offset = 0,
-			}, {
-				.name = "Serial Flash 2",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
+			{
+				.name   = "Reserve",        // mtd2
+				.size   = MTDPART_SIZ_FULL, // 512 kbyte
+				.offset = 0x00780000,
 			},
 		},
 	},
+};
+
+// NAND flash
+struct stm_nand_bank_data sat7111_nand_data =
+{
+	.csn           = 1,
+	.options       = NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
+	.nr_partitions = 4,
+	.partitions    = (struct mtd_partition [])
+	{
+		{
+			.name   = "Spark Kernel",  // mtd3
+			.size   = 0x0800000,       // 8 Mbyte
+			.offset = 0
+		},
+		{
+			.name   = "Spark Rootfs",  // mtd4
+			.size   = 0x17800000,      // 376 Mbyte
+			.offset = 0x800000
+		},
+		{
+			.name   = "E2 Kernel",     // mtd5
+			.size   = 0x800000,        // 8 Mkbyte (note: boot loader only flashes 7 Mbyte)
+			.offset = 0x18000000
+		},
+		{
+			.name   = "E2 RootFs",     // mtd6
+			.size   = 0x7700000,       // 119 Mbyte
+			.offset = 0x18800000
+		},
+	},
+#if 0
+	.timing_data     = &(struct stm_nand_timing_data)
+	{
+		.sig_setup   = 50,  // times in ns
+		.sig_hold    = 50,
+		.CE_deassert = 0,
+		.WE_to_RBn   = 100,
+		.wr_on       = 10,
+		.wr_off      = 40,
+		.rd_on       = 10,
+		.rd_off      = 40,
+		.chip_delay  = 30,  // in us
+	},
+#else
+	.timing_spec     = &NAND_TSPEC_SPANSION_S34ML01G1,
+#endif
 };
 
 static int sat7111_phy_reset(void *bus)
@@ -202,64 +174,111 @@
 	return 1;
 };
 
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
+static struct stmmac_mdio_bus_data stmmac_mdio_bus =
+{
 	.bus_id = 0,
 	.phy_reset = &sat7111_phy_reset,
 	.phy_mask = 0,
 };
 
-static struct platform_device *sat7111_devices[] __initdata = {
-	&sat7111_leds,
+static struct platform_device *sat7111_devices[] __initdata =
+{
 	&sat7111_nor_flash,
-	&sat7111_button_device,
 };
 
 static int __init sat7111_devices_init(void)
 {
-	int peripherals_i2c_bus;
-
-	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
-			.out0_enabled = 1,
-			.out1_enabled = 0, });
-
-	stx7111_configure_ssc_spi(0, NULL);
-	stx7111_configure_ssc_i2c(1, NULL); /* J12=1-2, J16=1-2 */
-	peripherals_i2c_bus = stx7111_configure_ssc_i2c(2, NULL);
+#if 0
+	int i, j;
+
+	/* Temporary: try and find the pio's */
+#define SLEEP 500
+	for (i = 1; i < 11; i++)  // port counter
+	{
+		for (j = 0; j < 8; j++)  // pin counter
+		{
+			if (! ((i == 18 && j == 2) \
+			    || (i == 18 && j == 3) \
+			    || (i == 18 && j == 4) \
+			    || (i == 18 && j == 5) \
+			    || (i == 18 && j == 3) \
+			    || (i == 18 && j == 4) \
+			    || (i == 18 && j == 5) \
+			    || (i == 18 && j == 6) \
+			    || (i == 18 && j == 7) \
+			    || (i == 4 && j == 3) \
+			    || (i == 4 && j == 4))
+			   )
+			{
+				stm_gpio_direction(stm_gpio(i, j), STM_GPIO_DIRECTION_OUT);
+				gpio_set_value(stm_gpio(i, j), 0);
+				printk("GPIO(%2d, %1d): ", i, j);
+				printk("off ");
+				mdelay(SLEEP);
+				gpio_set_value(stm_gpio(i, j), 1);
+				printk("on ");
+				mdelay(SLEEP);
+				gpio_set_value(stm_gpio(i, j), 0);
+				printk("off ");
+				mdelay(SLEEP);
+				stm_gpio_direction(stm_gpio(i, j), STM_GPIO_DIRECTION_IN);
+				printk("set to input\n");
+				mdelay(3 * SLEEP);
+			}
+			else
+			{
+				printk("GPIO(%2d, %1d) skipped\n", i, j);
+			}
+		}
+		printk("\n");
+	}
+#endif
+
+	/* I2C_xxxA - becomes I2C-0 - ? */
+	stx7111_configure_ssc_i2c(0, NULL);
+	/* I2C_xxxB - becomes I2C-1 - ? */
+	stx7111_configure_ssc_i2c(1, NULL);
+	/* I2C_xxxC - becomes I2C-2 - ? */
+	stx7111_configure_ssc_i2c(2, NULL);
+	/* I2C_xxxD - becomes I2C-3 - STV0903 demod */
 	stx7111_configure_ssc_i2c(3, NULL);
 
-	stx7111_configure_usb(&(struct stx7111_usb_config) {
-			.invert_ovrcur = 1, });
-
-	stx7111_configure_ethernet(&(struct stx7111_ethernet_config) {
-			.mode = stx7111_ethernet_mode_mii,
-			.ext_clk = 0,
-			.phy_bus = 0,
-			.phy_addr = -1,
-			.mdio_bus_data = &stmmac_mdio_bus,});
-
-	stx7111_configure_lirc(&(struct stx7111_lirc_config) {
-			.rx_mode = stx7111_lirc_rx_mode_ir,
-			.tx_enabled = 1,
-			.tx_od_enabled = 0, });
+	stx7111_configure_usb(&(struct stx7111_usb_config)
+	{
+		.invert_ovrcur = 1,
+	});
+
+	stx7111_configure_ethernet(&(struct stx7111_ethernet_config)
+	{
+		.mode = stx7111_ethernet_mode_mii,
+		.ext_clk = 0,
+		.phy_bus = 0,
+		.phy_addr = -1,
+		.mdio_bus_data = &stmmac_mdio_bus,
+	});
+
+	stx7111_configure_lirc(&(struct stx7111_lirc_config)
+	{
+		.rx_mode = stx7111_lirc_rx_mode_ir,
+		.tx_enabled = 1,
+		.tx_od_enabled = 0,
+	});
 
 	gpio_request(SAT7111_PHY_RESET, "PHY");
-
 	gpio_direction_output(SAT7111_PHY_RESET, 0);
 
-	stx7111_configure_nand(&(struct stm_nand_config) {
-			.driver = stm_nand_flex,
-			.nr_banks = 1,
-			.banks = &sat7111_nand_flash,
-			.rbn.flex_connected = 1,});
-
-	spi_register_board_info(&sat7111_serial_flash, 1);
-
-	return platform_add_devices(sat7111_devices,
-				    ARRAY_SIZE(sat7111_devices));
+	stx7111_configure_nand(&(struct stm_nand_config)
+	{
+		.driver             = stm_nand_flex,
+		.nr_banks           = 1,
+		.banks              = &sat7111_nand_data,
+		.rbn.flex_connected = 1,
+	});
+	return platform_add_devices(sat7111_devices, ARRAY_SIZE(sat7111_devices));
 }
 arch_initcall(sat7111_devices_init);
 
-static void __iomem *sat7111_ioport_map(unsigned long port, unsigned int size)
+static void __iomem *spark_ioport_map(unsigned long port, unsigned int size)
 {
 	/*
 	 * If we have PCI then this should never be called because we
@@ -271,15 +290,17 @@
 	return (void __iomem *)CCN_PVR;
 }
 
-static void __init sat7111_init_irq(void)
+static void __init spark_init_irq(void)
 {
 
 }
 
-struct sh_machine_vector mv_sat7111 __initmv = {
-	.mv_name		= "sat7111",
-	.mv_setup		= sat7111_setup,
-	.mv_nr_irqs		= NR_IRQS,
-	.mv_init_irq		= sat7111_init_irq,
-	.mv_ioport_map		= sat7111_ioport_map,
-};
+struct sh_machine_vector mv_sat7111 __initmv =
+{
+	.mv_name       = "spark",
+	.mv_setup      = spark_setup,
+	.mv_nr_irqs    = NR_IRQS,
+	.mv_init_irq   = spark_init_irq,
+	.mv_ioport_map = spark_ioport_map,
+};
+// vim:ts=4
--- a/drivers/net/stmmac/stmmac_mdio.c.org
+++ b/drivers/net/stmmac/stmmac_mdio.c
@@ -170,6 +170,7 @@
 	priv->mii = new_bus;
 
 	found = 0;
+
 	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
 		struct phy_device *phydev = new_bus->phy_map[addr];
 		if (phydev) {
@@ -194,12 +195,24 @@
 			 * and no PHY number was provided to the MAC,
 			 * use the one probed here.
 			 */
-			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
-			    (priv->plat->phy_addr == -1))
+
+			act = 0;
+
+			if ((priv->plat->bus_id == mdio_bus_data->bus_id)
+			&&  (
+				 (phydev->phy_id == 0x0181b880)    // Davicom DM9161E
+			||	 (phydev->phy_id == 0x0181b8a0)    // Davicom DM9161A
+			||	 (phydev->phy_id == 0x00181b80)    // Davicom DM9131
+			||	 (phydev->phy_id == 0x1c040011)    // STM STE100P
+			||	 (phydev->phy_id == 0x00061c50)    // STM STE101P
+			||	 (phydev->phy_id == 0x00008201)    // Realtek RTL8201CP
+			||	 (phydev->phy_id == 0x0007c0f1)    // SMSC LAN8710A
+			||	 (phydev->phy_id == 0x001cc912)))  // Realtek RTL821x
+			{
 				priv->plat->phy_addr = addr;
-
-			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
-				(priv->plat->phy_addr == addr);
+				act=1;
+			}
+
 			switch (phydev->irq) {
 			case PHY_POLL:
 				irq_str = "POLL";
@@ -212,10 +225,12 @@
 				irq_str = irq_num;
 				break;
 			}
-			pr_info("%s: PHY ID %08x at %d IRQ %s (%s)%s\n",
-				ndev->name, phydev->phy_id, addr,
-				irq_str, dev_name(&phydev->dev),
-				act ? " active" : "");
+			if (act)
+			{
+				pr_info("%s: PHY ID %08x at %d IRQ %s (%s)\n",
+					ndev->name, phydev->phy_id, addr,
+					irq_str, dev_name(&phydev->dev));
+			}
 			found = 1;
 		}
 	}
--- a/drivers/net/stmmac/dwmac_lib.c.org
+++ b/drivers/net/stmmac/dwmac_lib.c
@@ -210,7 +210,7 @@
 	}
 	/* Optional hardware blocks, interrupts should be disabled */
 	if (unlikely(intr_status &
-		     (DMA_STATUS_GPI | DMA_STATUS_GMI | DMA_STATUS_GLI)))
+		     (DMA_STATUS_GPI | DMA_STATUS_GMI | DMA_STATUS_GLI)) && printk_ratelimit())
 		pr_info("%s: unexpected status %08x\n", __func__, intr_status);
 	/* Clear the interrupt by writing a logic 1 to the CSR5[15-0] */
 	writel((intr_status & 0x1ffff), ioaddr + DMA_STATUS);
--- a/drivers/mtd/nand/nand_ecc.c_org
+++ b/drivers/mtd/nand/nand_ecc.c
@@ -492,12 +492,12 @@
 	}
 	/* count nr of bits; use table lookup, faster than calculating it */
 	if ((bitsperbyte[b0] + bitsperbyte[b1] + bitsperbyte[b2]) == 1) {
-		printk(KERN_DEBUG "%s: ignoring error in ECC, data ok: [",
-		       __func__);
+		/*printk(KERN_DEBUG "%s: ignoring error in ECC, data ok: [",
+		       __func__);*/
 		return 1;	/* error in ecc data; no action needed */
 	}
 
-	printk(KERN_ERR "%s: uncorrectable error: [", __func__);
+	//printk(KERN_ERR "%s: uncorrectable error: [", __func__);
 	return -1;
 }
 EXPORT_SYMBOL(__nand_correct_data);
--- a/drivers/mtd/nand/nand_base.c_org
+++ b/drivers/mtd/nand/nand_base.c
@@ -1386,20 +1386,15 @@
 
 			/* Now read the page into the buffer */
 			if (unlikely(ops->mode == MTD_OOB_RAW))
-				ret = chip->ecc.read_page_raw(mtd, chip,
-							      bufpoi, page);
-			else if (!aligned && NAND_SUBPAGE_READ(chip) && !oob)
-				ret = chip->ecc.read_subpage(mtd, chip, col, bytes, bufpoi);
+				ret = chip->ecc.read_page_raw(mtd, chip,bufpoi, page);
 			else
-				ret = chip->ecc.read_page(mtd, chip, bufpoi,
-							  page);
+				ret = chip->ecc.read_page(mtd, chip, bufpoi, page);
 			if (ret < 0)
 				break;
 
 			/* Transfer not aligned data */
 			if (!aligned) {
-				if (!NAND_SUBPAGE_READ(chip) && !oob)
-					chip->pagebuf = realpage;
+				chip->pagebuf = realpage;
 				memcpy(buf, chip->buffers->databuf + col, bytes);
 			}
 
--- linux-sh4/drivers/stm/gpio.c.org
+++ linux-sh4/drivers/stm/gpio.c
@@ -28,12 +28,17 @@
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
 #include <linux/stm/pm_sys.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include "reg_pio.h"
 
 
 
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
 	void (*func)(struct stpio_pin *pin, void *dev);
 	void* dev;
 	unsigned short port_no, pin_no;
@@ -42,16 +47,16 @@
 
 struct stm_gpio_pin {
 	unsigned char flags;
-#define PIN_FAKE_EDGE		4
+#define PIN_FAKE_EDGE			4
 #define PIN_IGNORE_EDGE_FLAG	2
 #define PIN_IGNORE_EDGE_VAL	1
 #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
 #define PIN_IGNORE_FALLING_EDGE	(PIN_IGNORE_EDGE_FLAG | 1)
 #define PIN_IGNORE_EDGE_MASK	(PIN_IGNORE_EDGE_FLAG | PIN_IGNORE_EDGE_VAL)
 
-#ifdef CONFIG_HIBERNATION
+//#ifdef CONFIG_HIBERNATION
 	unsigned char pm_saved_data;
-#endif
+//#endif
 	struct stpio_pin stpio;
 };
 
@@ -114,7 +119,6 @@
 
 
 
-
 int stm_gpio_num; /* Number of available internal PIOs (pins) */
 EXPORT_SYMBOL(stm_gpio_num);
 
@@ -392,6 +396,11 @@
 
 	gpio_pm_set_direction(&port->pins[offset], direction);
 	set__PIO_PCx(port->base, offset, direction);
+
+	if (!port->pins[offset].stpio.pin_name)
+	{
+		port->pins[offset].stpio.pin_name = "-----";
+	}
 }
 
 
@@ -424,8 +433,15 @@
 
 static int stm_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
 {
+	struct stm_gpio_port *port = to_stm_gpio_port(chip);
+
 	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_IN);
 
+	if (!port->pins[offset].stpio.pin_name)
+	{
+		port->pins[offset].stpio.pin_name = "-----";
+	}
+
 	return 0;
 }
 
@@ -438,6 +455,10 @@
 
 	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_OUT);
 
+	if (!port->pins[offset].stpio.pin_name)
+	{
+		port->pins[offset].stpio.pin_name = "-----";
+	}
 	return 0;
 }
 
@@ -503,13 +524,17 @@
 
 	gpio_pin->stpio.port_no = port_no;
 	gpio_pin->stpio.pin_no = pin_no;
-
+	gpio_pin->stpio.pin_name = (name == NULL) ? "-----" : name;
 	return &gpio_pin->stpio;
 }
 EXPORT_SYMBOL(__stpio_request_pin);
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+	stpio_configure_pin(pin, STPIO_IN);
+	pin->pin_name = NULL;
+	pin->func = 0;
+	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -625,6 +650,117 @@
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
 
+#ifdef CONFIG_PROC_FS
+
+static struct proc_dir_entry *proc_stpio;
+
+static inline const char *stpio_get_direction_name(unsigned int direction)
+{
+	switch (direction)
+	{
+		case STPIO_NONPIO:
+		{
+			return "IN  (pull-up)      ";
+		}
+		case STPIO_BIDIR:
+		{
+			return "BI  (open-drain)   ";
+		}
+		case STPIO_OUT:
+		{
+			return "OUT (push-pull)    ";
+		}
+		case STPIO_IN:
+		{
+			return "IN  (Hi-Z)         ";
+		}
+		case STPIO_ALT_OUT:
+		{
+			return "Alt-OUT (push-pull)";
+		}
+		case STPIO_ALT_BIDIR:
+		{
+			return "Alt-BI (open-drain)";
+		}
+		default:
+		{
+			return "illegal            ";
+		}
+	}
+};
+
+static inline const char *stpio_get_handler_name(void *func)
+{
+	static char sym_name[KSYM_NAME_LEN];
+	char *modname;
+	unsigned long symbolsize, offset;
+	const char *symb;
+
+	if (func == NULL)
+	{
+		return "";
+	}
+
+	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset, &modname, sym_name);
+	return symb ? symb : "???";
+}
+
+static int stpio_read_proc(char *page, char **start, off_t off, int count,
+		int *eof, void *data_unused)
+{
+	int len;
+	int port_no, pin_no;
+	off_t begin = 0;
+	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	struct stm_gpio_port *port;
+	struct stm_gpio_pin *pin;
+	const char *name;
+
+	len = sprintf(page, "  Port      Name          Direction\n");
+	for (port_no = 0; port_no < num_ports; port_no++)
+	{
+		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++)
+		{
+			port = &stm_gpio_ports[port_no];
+			if (!port)
+			{
+				continue;
+			}
+			pin = &port->pins[pin_no];
+			if (!pin)
+			{
+				continue;
+			}
+			name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+			len += sprintf(page + len,
+					"PIO %2d.%d [%-10s] [%s] [%s]\n",
+					port_no, pin_no, name,
+					stpio_get_direction_name(pin->pm_saved_data),
+					stpio_get_handler_name(pin->stpio.func));
+
+			if (len + begin > off + count)
+			{
+				goto done;
+			}
+			if (len + begin < off)
+			{
+				begin += len;
+				len = 0;
+			}
+		}
+	}
+	*eof = 1;
+
+done:
+	if (off >= len + begin)
+	{
+		return 0;
+	}
+	*start = page + (off - begin);
+	return ((count < begin + len - off) ? count : begin + len - off);
+}
+
+#endif /* CONFIG_PROC_FS */
 #endif /* CONFIG_STPIO */
 
 
@@ -1032,6 +1162,13 @@
 {
 	int ret;
 
+#ifdef CONFIG_PROC_FS
+	proc_stpio = create_proc_entry("stpio", 0, NULL);
+	if (proc_stpio)
+	{
+		proc_stpio->read_proc = stpio_read_proc;
+	}
+#endif
 	ret = platform_driver_register(&stm_gpio_driver);
 	if (ret)
 		return ret;

