--- a/drivers/mtd/maps/physmap.c.org
+++ b/drivers/mtd/maps/physmap.c
@@ -83,6 +83,87 @@
 static const char *part_probe_types[] = { "cmdlinepart", "RedBoot", NULL };
 #endif
 
+
+static struct mtd_partition partition_info[]=
+{
+	{
+		.name   = "Boot_firmware", // mtd0
+		.size   = 0x00100000,      // 1M
+		.offset = 0x00000000,
+	},
+	{
+		.name   = "Kernel",        // mtd1
+		.size   = 0x00300000,      // 3M
+		.offset = 0x00100000,
+	},
+	{
+		.name   = "APP_BAK",       // mtd2
+		.size   = 0x006E0000,      // 6,875M
+		.offset = 0x00B20000,      // 0xB00000 + 0x20000 squashfs
+	},
+	{
+		.name   = "ROOT FS",       // mtd3
+		.size   = 0x00BD0000,      // 11,8125M + 0x10000 error
+		.offset = 0x01220000,      // 0x1200000 + 20000 squashfs
+	},
+	{
+		.name   = "Device",        // mtd4
+		.size   = 0x002D0000,      // 2,8125M + 0x10000 error
+		.offset = 0x01E20000,      // 0x1E00000 + 0x20000 squashfs
+	},
+	{
+		.name   = "Config",        // mtd5
+		.size   = 0x000C0000,      // 0,75M
+		.offset = 0x02100000,
+	},
+	{
+		.name   = "User",          // mdt6
+		.size   = 0x01D00000,      // 30M
+		.offset = 0x02200000,
+	},
+	{
+		.name   = "APP_ORG",       // mtd7
+		.size   = 0x006E0000,      // 6,875M
+		.offset = 0x00420000,      // 0x400000 + 0x20000 squashfs
+	},
+};
+
+static struct mtd_partition higlvl_partition_info[]=
+{
+	{
+		.name   = "Boot_firmware", // mtd0
+		.size   = 0x00100000,      // 1M
+		.offset = 0x00000000,
+	},
+	{
+		.name = "Kernel",        // mdt1
+		.size = 0x00300000,	     // 3M
+		.offset = 0x00100000,
+	},
+	{
+		.name = "FW",            // mtd2
+		.size = 0x006E0000,      // 6,875M
+		.offset = 0x00400000,
+	},
+	{
+		.name = "ROOT",          // mtd3
+		.size = 0x02C60000,	     // 43,375M
+		.offset =	0x00AE0000,
+	},
+	{
+		.name = "SWAP",          // mtd4
+		.size = 0x006E0000,      // 6,875M
+		.offset = 0x03740000,
+	},
+};
+
+#define NUM_PARTITIONS ARRAY_SIZE(partition_info)
+#define NUM_HIGHLVL_PARTITIONS ARRAY_SIZE(higlvl_partition_info)
+
+static struct mtd_info *lowlvl_parts[NUM_PARTITIONS];
+static struct mtd_info *merged_mtd;
+
+
 static int physmap_flash_probe(struct platform_device *dev)
 {
 	struct physmap_flash_data *physmap_data;
@@ -106,7 +187,7 @@
 	platform_set_drvdata(dev, info);
 
 	for (i = 0; i < dev->num_resources; i++) {
-		printk(KERN_NOTICE "physmap platform flash device: %.8llx at %.8llx\n",
+		printk("physmap platform flash device: %.8llx at %.8llx\n",
 		       (unsigned long long)(dev->resource[i].end - dev->resource[i].start + 1),
 		       (unsigned long long)dev->resource[i].start);
 
@@ -126,6 +207,8 @@
 		info->map[i].set_vpp = physmap_data->set_vpp;
 		info->map[i].pfow_base = physmap_data->pfow_base;
 
+		printk("MAP[%d]: %s %p %lu %d %p\n", i, info->map[i].name, info->map[i].phys, info->map[i].size, info->map[i].bankwidth, info->map[i].set_vpp);
+
 		info->map[i].virt = devm_ioremap(&dev->dev, info->map[i].phys,
 						 info->map[i].size);
 		if (info->map[i].virt == NULL) {
@@ -136,6 +219,8 @@
 
 		simple_map_init(&info->map[i]);
 
+		printk("MAP[%d]: virtual address: 0x%p\n", i, info->map[i].virt);
+
 		probe_type = rom_probe_types;
 		for (; info->mtd[i] == NULL && *probe_type != NULL; probe_type++)
 			info->mtd[i] = do_map_probe(*probe_type, &info->map[i]);
@@ -169,6 +254,25 @@
 	if (err)
 		goto err_out;
 
+	partition_info[0].mtdp = &lowlvl_parts[0];
+	partition_info[1].mtdp = &lowlvl_parts[1];
+	partition_info[2].mtdp = &lowlvl_parts[2];
+	partition_info[3].mtdp = &lowlvl_parts[3];
+	partition_info[4].mtdp = &lowlvl_parts[4];
+	partition_info[5].mtdp = &lowlvl_parts[5];
+	partition_info[6].mtdp = &lowlvl_parts[6];
+	partition_info[7].mtdp = &lowlvl_parts[7];
+
+	add_mtd_partitions(info->cmtd, partition_info, NUM_PARTITIONS);
+
+	merged_mtd = mtd_concat_create(lowlvl_parts, NUM_PARTITIONS, "NOR Flash Concatenated");
+	if(merged_mtd)
+	{
+		add_mtd_partitions(merged_mtd, higlvl_partition_info, NUM_HIGHLVL_PARTITIONS);
+	}
+
+
+#if 0
 #ifdef CONFIG_MTD_PARTITIONS
 	err = parse_mtd_partitions(info->cmtd, part_probe_types,
 				&info->parts, 0);
@@ -187,6 +291,7 @@
 #endif
 
 	add_mtd_device(info->cmtd);
+#endif
 	return 0;
 
 err_out:
--- a/drivers/mtd/mtdpart.c.org
+++ b/drivers/mtd/mtdpart.c
@@ -27,7 +27,9 @@
 	struct mtd_info mtd;
 	struct mtd_info *master;
 	uint64_t offset;
+	int index;
 	struct list_head list;
+	int registered;
 };
 
 /*
@@ -319,7 +321,8 @@ int del_mtd_partitions(struct mtd_info *master)
 	list_for_each_entry_safe(slave, next, &mtd_partitions, list)
 		if (slave->master == master) {
 			list_del(&slave->list);
+			if (slave->registered)
+				del_mtd_device(&slave->mtd);
-			del_mtd_device(&slave->mtd);
 			kfree(slave);
 		}
 
@@ -409,6 +412,7 @@ static struct mtd_part *add_one_partition(struct mtd_info *master,
 	slave->mtd.erase = part_erase;
 	slave->master = master;
 	slave->offset = part->offset;
+	slave->index = partno;
 
 	if (slave->offset == MTDPART_OFS_APPEND)
 		slave->offset = cur_offset;
@@ -496,9 +500,15 @@ static struct mtd_part *add_one_partition(struct mtd_info *master,
 	}
 
 out_register:
+	if (part->mtdp) {
+		/* store the object pointer (caller may or may not register it*/
+		*part->mtdp = &slave->mtd;
+		slave->registered = 0;
+	} else {
+		/* register our partition */
+		add_mtd_device(&slave->mtd);
+		slave->registered = 1;
+	}
-	/* register our partition */
-	add_mtd_device(&slave->mtd);
-
 	return slave;
 }
 
--- a/include/linux/mtd/partitions.h.org
+++ b/include/linux/mtd/partitions.h
@@ -40,6 +40,7 @@
 	uint64_t offset;		/* offset within the master MTD space */
 	uint32_t mask_flags;		/* master MTD flags to mask out for this partition */
 	struct nand_ecclayout *ecclayout;	/* out of band layout for this partition (NAND only)*/
+	struct mtd_info **mtdp;		/* pointer to store the MTD object */
 };
 
 #define MTDPART_OFS_NXTBLK	(-2)
